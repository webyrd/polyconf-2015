Vicare Scheme version 0.1d2, 64-bit
Copyright (c) 2006-2010 Abdulaziz Ghuloum and contributors

> (load "../faster-miniKanren/mk-vicare.scm")
(load "../faster-miniKanren/mk.scm")
> > ==
#<procedure == [char 12263 of mk.scm]>
> (+ 3 4)
7
> ==
#<procedure == [char 12263 of mk.scm]>
> (== 3 4)
#<procedure>
> (run 1 (q) (== 3 4))
()
> (run 1 (q) (== q 4))
(4)
> (run 2 (q) (== q 4))
(4)
> (run 1000 (q) (== q 4))
(4)
> (run* (q) (== q 4))
(4)
> (run #f (q) (== q 4))
(4)
> (run* (q) (== q 4))
(4)
> (run* (q) (== 4 4))
(_.0)
> (run* (q) (== 3 4))
()
> (run* (q) (== q 4))
(4)
> (run* (q) (== q q))
(_.0)
> (run* (q) (== (list q) q))
()
> (run* (q) (== (list 3 4 5) q))
((3 4 5))
> (run* (q x)
    (== (list 3 x 5) q))
(((3 _.0 5) _.0))
> (run* (q)
    (fresh (x)
      (== (list 3 x 5) q)))
((3 _.0 5))
> (run* (q)
    (fresh (x)
      (== x 4)
      (== (list 3 x 5) q)))
((3 4 5))
> (run* (q)
    (fresh (x)
      (== (list 3 x 5) q)
      (== x 4)))
((3 4 5))
> (run* (q)
    (fresh (x)
      (== (list 3 x 5) q)
      (== x 4)))
((3 4 5))
> (run 1 (q)
    (conde
      ((== q 3))
      ((== q 4))))
(3)
> (run 2 (q)
    (conde
      ((== q 3))
      ((== q 4))))
(3 4)
> (run 3 (q)
    (conde
      ((== q 3))
      ((== q 4))))
(3 4)
> (run* (q)
    (conde
      ((== q 3))
      ((== q 4))))
(3 4)
> (define threes
    (lambda (x)
      (== x 3)))
> (run* (q) (threes q))
(3)
> (define threes
    (lambda (x)
      (conde
        ((== x 3))
        ((== x 3)))))
> (run* (q) (threes q))
(3 3)
> (define threes
    (lambda (x)
      (conde
        ((== x 3))
        ((threes x)))))
> (run 10 (q) (threes q))
(3 3 3 3 3 3 3 3 3 3)
> (define threes
    (lambda (x)
      (conde
        ((threes x))
        ((== x 3)))))
> (run 10 (q) (threes q))\
(3 3 3 3 3 3 3 3 3 3)
> Unhandled exception
 Condition components:
   1. &lexical
   2. &message: "invalid sequence \\\n"
   3. &source-position:
       file-name: *stdin*
       character: 1290
> (run 10 (q) (threes q))
(3 3 3 3 3 3 3 3 3 3)
> (define threes
    (lambda (x)
      (conde
        ((threes x))
        ((== x 3)))))
> (append '(a b c) '(d e))
(a b c d e)
> (define my-append
    (lambda (l1 l2)
      (cond
        ((null? l1) l2)
        (else 
         (cons (car l1)
               (my-append (cdr l1) l2))))))
> (my-append '(a b c) '(d e))
(a b c d e)
> (define appendo
    (lambda (l1 l2 out)
      (conde
        ((== '() l1) (== l2 out))
        ((fresh (first rest temp)
           (== (cons first rest) l1)
           (appendo rest l2 temp)
           (== (cons first temp) out))))))
> (run 1 (q) (appendo '(a b c) '(d e) q))
((a b c d e))
> (run 2 (q) (appendo '(a b c) '(d e) q))
((a b c d e))
> (run* (q) (appendo '(a b c) '(d e) q))
((a b c d e))
> (run 1 (q) (appendo '(a b c) q '(a b c d e)))
((d e))
> (run 2 (q) (appendo '(a b c) q '(a b c d e)))
((d e))
> (run 1 (q) (appendo q '(d e) '(a b c d e)))
((a b c))
> (run 2 (q) (appendo q '(d e) '(a b c d e)))
  C-c C-cUnhandled exception
 Condition components:
   1. &interrupted
   2. &message: "received an interrupt signal"
> (define appendo
    (lambda (l1 l2 out)
      (conde
        ((== '() l1) (== l2 out))
        ((fresh (first rest temp)
           (== (cons first rest) l1)
           (== (cons first temp) out)
           (appendo rest l2 temp))))))
> (run 2 (q) (appendo q '(d e) '(a b c d e)))
((a b c))
> (run* (q) (appendo q '(d e) '(a b c d e)))
((a b c))
> (define appendo
    (lambda (l1 l2 out)
      (conde
        ((fresh (first rest temp)
           (== (cons first rest) l1)
           (== (cons first temp) out)
           (appendo rest l2 temp)))
        ((== '() l1) (== l2 out)))))
> (run* (q) (appendo q '(d e) '(a b c d e)))
((a b c))
> (define appendo
    (lambda (l1 l2 out)
      (conde
        ((fresh (first rest temp)
           (appendo rest l2 temp)
           (== (cons first temp) out)
           (== (cons first rest) l1)))
        ((== l2 out) (== '() l1)))))
> (run 1 (q) (appendo q '(d e) '(a b c d e)))
((a b c))
> (run 2 (q) (appendo q '(d e) '(a b c d e)))
  C-c C-cUnhandled exception
 Condition components:
   1. &interrupted
   2. &message: "received an interrupt signal"
> (define appendo
    (lambda (l1 l2 out)
      (conde
        ((fresh (first rest temp)
           (== (cons first rest) l1)
           (== (cons first temp) out)
           (appendo rest l2 temp)))
        ((== l2 out) (== '() l1)))))
> (run 2 (q) (appendo q '(d e) '(a b c d e)))
((a b c))
> (run 2 (q) (appendo q '(d e) '(a b c d e)))
((a b c))
> (run 1 (x y) (appendo x y '(a b c d e)))
((() (a b c d e)))
> (run* (x y) (appendo x y '(a b c d e)))
((() (a b c d e))
 ((a) (b c d e))
 ((a b) (c d e))
 ((a b c) (d e))
 ((a b c d) (e))
 ((a b c d e) ()))
> (run* (x y) (appendo `(a b . ,x) y '(a b c d e)))
((() (c d e))
 ((c) (d e))
 ((c d) (e))
 ((c d e) ()))
> (run 1 (q)
    (fresh (x)
      (== (list 3 4 5) q)))
((3 4 5))
> (run 1 (q)
    (fresh (x)
      (== (list 3 x 5) q)))
((3 _.0 5))
> (run 1 (q)
    (fresh (x)
      (== x 4)
      (== (list 3 x 5) q)))
((3 4 5))
> (run 1 (q)
    (fresh (x)
      (== (list 3 x 5) q)
      (== x 4)))
((3 4 5))
> (run 1 (q x)
    (== (list 3 x 5) q)
    (== x 4))
(((3 4 5) 4))
> (run 1 (q x)
    (== (list 3 x 5) q))
(((3 _.0 5) _.0))
> (run 1 (q)
    (fresh (x y z)
      (== (list 3 x 5 y 6 x 7 z) q)))
((3 _.0 5 _.1 6 _.0 7 _.2))
> (run 1 (q)
    (fresh (x y z)
      (== x 4)
      (== (list 3 x 5 y 6 x 7 z) q)))
((3 4 5 _.0 6 4 7 _.1))
> (load "interp.scm")
> (lookup 'z '())
Unhandled exception
 Condition components:
   1. &error
   2. &who: lookup
   3. &message: "unbound variable"
   4. &irritants: ()
> (lookup 'z '((z . 5)))
5
> (lookup 'z '((x . 3) (z . 5)))
5
> (lookup 'z '((z . 4) (x . 3) (z . 5)))
4
> (lambda (z)
    (lambda (x)
      (lambda (z)
        (* z z))))
#<procedure>
> (load "interp.scm")
> (eval-expr 'x '())
Unhandled exception
 Condition components:
   1. &error
   2. &who: lookup
   3. &message: "unbound variable"
   4. &irritants: ()
> (eval-expr 'x '((x . 0)))
0
> (eval-expr '(lambda (x) x) '())
(closure x x ())
> (eval-expr '(lambda (x) (lambda (y) x)) '())
(closure x (lambda (y) x) ())
> (eval-expr '(lambda (x) (lambda (y) x)) '((z . 3)))
(closure x (lambda (y) x) ((z . 3)))
> (eval-expr '((lambda (x) x) (lambda (y) y)) '())
(closure y y ())
> (eval-expr '((lambda (x) (x x)) (lambda (x) (x x))) '())
  C-c C-cUnhandled exception
 Condition components:
   1. &interrupted
   2. &message: "received an interrupt signal"
> (load "interp.scm")
> (eval-expr '((lambda (x) (x)) 5) '())
pmatch failed
 (x)
Unhandled exception
 Condition components:
   1. &error
   2. &who: pmatch
   3. &message: "match failed"
   4. &irritants: ()
> (eval-expr '5 '())
5
> (eval-expr '((lambda (x) x) 5) '())
5
> (load "interp.scm")
> (eval-expr '((lambda (x) (* x x)) 5) '())
25
> (if (zero? 5)
      (add1 6)
      (sub1 8))
7
> 

Process scheme finished
Vicare Scheme version 0.1d2, 64-bit
Copyright (c) 2006-2010 Abdulaziz Ghuloum and contributors

> (load "interpo.scm")
> (run 1 (q) (lookupo 'x '() q))
()
> (run 1 (q) (lookupo 'x '((x . 5)) q))
(5)
> (run* (q) (lookupo 'x '((x . 5)) q))
(5)
> (run* (q) (lookupo 'x '((x . 5) (x . 6)) q))  C-c C-c
> (load "interpo.scm")
> (run* (q) (lookupo 'x '((x . 5) (x . 6)) q))
  C-c C-cUnhandled exception
 Condition components:
   1. &interrupted
   2. &message: "received an interrupt signal"
> 

Process scheme finished
Vicare Scheme version 0.1d2, 64-bit
Copyright (c) 2006-2010 Abdulaziz Ghuloum and contributors

> (load "interpo.scm")
> (run* (q) (lookupo 'x '((x . 5) (x . 6)) q))
(5)
> (load "interpo.scm")
> (run* (q) (lookupo 'x '((x . 5) (x . 6)) q))
(5 6)
> (load "interpo.scm")
> (run* (q) (lookupo 'x '((x . 5) (x . 6)) q))
(5)
> (run* (q) (lookupo q '((x . 5) (y . 6)) '6))
(y)
> (run* (q) (lookupo q '((x . 6) (y . 6)) '6))
(x y)
> (load "interpo.scm")
> (run* (q) (eval-expro '(lambda (x) x) '() q))
((closure x x ()))
> (run* (q) (eval-expro '((lambda (x) x) (lambda (y) y)) '() q))
((closure y y ()))
> (run* (q) (eval-expro '((lambda (x) x) (lambda (y) y)) '((z . 5)) q))
((closure y y ((z . 5))))
> (run 1 (q) 
    (eval-expro 
     q
     '()
     '(closure y y ())))
((lambda (y) y))
> (run 2 (q) 
    (eval-expro 
     q
     '()
     '(closure y y ())))
((lambda (y) y)
  (((lambda (_.0) _.0) (lambda (y) y))
   (sym _.0)))
> ((lambda (_.0) _.0) (lambda (y) y))
#<procedure _.0>
> (((lambda (_.0) _.0) (lambda (y) y)) 42)
42
> (run 100 (q) 
    (eval-expro 
     q
     '()
     '(closure y y ())))
((lambda (y) y)
  (((lambda (_.0) _.0) (lambda (y) y)) (sym _.0))
  (((lambda (_.0) (_.0 _.0)) (lambda (y) y)) (sym _.0))
  (((lambda (_.0) _.0) ((lambda (_.1) _.1) (lambda (y) y)))
    (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) _.1) _.0)) (lambda (y) y))
    (sym _.0 _.1))
  ((((lambda (_.0) _.0) (lambda (_.1) _.1)) (lambda (y) y))
    (sym _.0 _.1))
  (((lambda (_.0) (_.0 _.0))
     ((lambda (_.1) _.1) (lambda (y) y)))
    (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) _.0) _.0)) (lambda (y) y))
    (=/= ((_.0 _.1))) (sym _.0))
  (((lambda (_.0) (_.0 _.0))
     ((lambda (_.1) (lambda (_.2) _.1)) (lambda (y) y)))
    (=/= ((_.1 _.2))) (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) _.0) (lambda (_.2) _.3)))
     (lambda (y) y))
    (=/= ((_.0 _.1))) (sym _.0))
  (((lambda (_.0) ((lambda (_.1) _.1) _.0))
     ((lambda (_.2) _.2) (lambda (y) y)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0) (_.0 (lambda (_.1) _.2)))
     ((lambda (_.3) (lambda (_.4) _.3)) (lambda (y) y)))
    (=/= ((_.3 _.4))) (sym _.0 _.3))
  ((((lambda (_.0) (lambda (_.1) _.1)) (lambda (_.2) _.3))
     (lambda (y) y))
    (sym _.1))
  ((((lambda (_.0) _.0) (lambda (_.1) (_.1 _.1)))
     (lambda (y) y))
    (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) (_.1 _.1)) _.0))
     (lambda (y) y))
    (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) _.0) _.0))
     ((lambda (_.2) _.2) (lambda (y) y)))
    (=/= ((_.0 _.1))) (sym _.0 _.2))
  ((((lambda (_.0) (lambda (_.1) _.0)) (lambda (y) y))
     (lambda (_.2) _.3))
    (=/= ((_.0 _.1))) (sym _.0))
  (((lambda (_.0) ((lambda (_.1) _.0) (lambda (_.2) _.3)))
     ((lambda (_.4) _.4) (lambda (y) y)))
    (=/= ((_.0 _.1))) (sym _.0 _.4))
  (((lambda (_.0) ((lambda (_.1) (_.1 _.1)) _.0))
     ((lambda (_.2) _.2) (lambda (y) y)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 _.1)) (lambda (_.2) _.0)))
     (lambda (y) y))
    (=/= ((_.0 _.2))) (sym _.0 _.1))
  ((((lambda (_.0) (lambda (_.1) (_.1 _.1)))
      (lambda (_.2) _.3))
     (lambda (y) y))
    (sym _.1))
  ((((lambda (_.0) _.0)
      (lambda (_.1) ((lambda (_.2) _.2) _.1)))
     (lambda (y) y))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) _.1)) _.0))
     (lambda (y) y))
    (sym _.0 _.1 _.2))
  (((lambda (_.0) (_.0 (_.0 _.0))) (lambda (y) y)) (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 (lambda (_.2) _.3)))
        (lambda (_.4) _.0)))
     (lambda (y) y))
    (=/= ((_.0 _.4))) (sym _.0 _.1))
  (((lambda (_.0) (_.0 _.0))
     ((lambda (_.1) (lambda (_.2) (_.2 (lambda (_.3) _.1))))
       (lambda (y) y)))
    (=/= ((_.1 _.2)) ((_.1 _.3))) (sym _.0 _.1 _.2))
  (((lambda (_.0) ((lambda (_.1) (_.1 _.0)) _.0))
     (lambda (y) y))
    (=/= ((_.0 _.1))) (sym _.0 _.1))
  ((((lambda (_.0) _.0)
      (lambda (_.1) ((lambda (_.2) _.1) _.1)))
     (lambda (y) y))
    (=/= ((_.1 _.2))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) _.1)) _.0))
     (lambda (y) y))
    (=/= ((_.1 _.2))) (sym _.0 _.1))
  (((lambda (_.0) (_.0 _.0))
     ((lambda (_.1) (lambda (_.2) ((lambda (_.3) _.1) _.2)))
       (lambda (y) y)))
    (=/= ((_.1 _.2)) ((_.1 _.3))) (sym _.0 _.1 _.2))
  ((((lambda (_.0) _.0) (lambda (_.1) _.1))
     ((lambda (_.2) _.2) (lambda (y) y)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 _.1)) (lambda (_.2) _.0)))
     ((lambda (_.3) _.3) (lambda (y) y)))
    (=/= ((_.0 _.2))) (sym _.0 _.1 _.3))
  (((lambda (_.0) ((lambda (_.1) (_.1 _.1)) _.0))
     ((lambda (_.2) (lambda (_.3) _.2)) (lambda (y) y)))
    (=/= ((_.2 _.3))) (sym _.0 _.1 _.2))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) _.1)) _.0))
     (lambda (y) y))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) _.1)) _.0))
     ((lambda (_.3) _.3) (lambda (y) y)))
    (sym _.0 _.1 _.2 _.3))
  (((lambda (_.0) (_.0 (_.0 _.0)))
     ((lambda (_.1) _.1) (lambda (y) y)))
    (sym _.0 _.1))
  ((((lambda (_.0) (lambda (_.1) ((lambda (_.2) _.2) _.1)))
      (lambda (_.3) _.4))
     (lambda (y) y))
    (sym _.1 _.2))
  ((((lambda (_.0) _.0)
      (lambda (_.1) ((lambda (_.2) _.1) (lambda (_.3) _.4))))
     (lambda (y) y))
    (=/= ((_.1 _.2))) (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) _.1) (_.0 _.0)))
     (lambda (y) y))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 (lambda (_.2) _.3)))
        (lambda (_.4) _.0)))
     ((lambda (_.5) _.5) (lambda (y) y)))
    (=/= ((_.0 _.4))) (sym _.0 _.1 _.5))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 (lambda (_.2) _.3))) _.0))
     ((lambda (_.4) (lambda (_.5) _.4)) (lambda (y) y)))
    (=/= ((_.4 _.5))) (sym _.0 _.1 _.4))
  (((lambda (_.0) ((lambda (_.1) _.0) (_.0 _.0)))
     (lambda (y) y))
    (=/= ((_.0 _.1))) (sym _.0))
  ((((lambda (_.0) _.0) (lambda (_.1) (_.1 _.1)))
     ((lambda (_.2) _.2) (lambda (y) y)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 _.0)) (lambda (_.2) _.2)))
     (lambda (y) y))
    (=/= ((_.0 _.1))) (sym _.0 _.1 _.2))
  (((lambda (_.0) (_.0 (lambda (_.1) _.1)))
     ((lambda (_.2) (lambda (_.3) (_.3 _.2))) (lambda (y) y)))
    (=/= ((_.2 _.3))) (sym _.0 _.1 _.2 _.3))
  (((lambda (_.0) ((lambda (_.1) (_.1 _.0)) _.0))
     ((lambda (_.2) _.2) (lambda (y) y)))
    (=/= ((_.0 _.1))) (sym _.0 _.1 _.2))
  (((lambda (_.0) _.0)
     ((lambda (_.1) (_.1 _.1)) (lambda (y) y)))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) _.1)) _.0))
     ((lambda (_.3) _.3) (lambda (y) y)))
    (=/= ((_.1 _.2))) (sym _.0 _.1 _.3))
  ((((lambda (_.0) (lambda (_.1) (_.1 _.0))) (lambda (y) y))
     (lambda (_.2) _.2))
    (=/= ((_.0 _.1))) (sym _.0 _.1 _.2))
  ((((lambda (_.0) (lambda (_.1) ((lambda (_.2) _.1) _.1)))
      (lambda (_.3) _.4))
     (lambda (y) y))
    (=/= ((_.1 _.2))) (sym _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) _.1))
        (lambda (_.3) _.4)))
     (lambda (y) y))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0 _.1))
  ((((lambda (_.0) _.0)
      (lambda (_.1) ((lambda (_.2) (_.2 _.2)) _.1)))
     (lambda (y) y))
    (sym _.0 _.1 _.2))
  (((lambda (_.0) (_.0 (lambda (_.1) _.2)))
     ((lambda (_.3) (lambda (_.4) ((lambda (_.5) _.3) _.4)))
       (lambda (y) y)))
    (=/= ((_.3 _.4)) ((_.3 _.5))) (sym _.0 _.3 _.4))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) (_.2 _.2)) _.1)) _.0))
     (lambda (y) y))
    (sym _.0 _.1 _.2))
  (((lambda (_.0) ((lambda (_.1) (_.1 _.1)) (_.0 _.0)))
     (lambda (y) y))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) (lambda (_.3) _.4)))
        _.0))
     (lambda (y) y))
    (=/= ((_.1 _.2))) (sym _.0 _.1))
  (((lambda (_.0) (_.0 _.0))
     ((lambda (_.1) (lambda (_.2) (_.2 _.1))) (lambda (y) y)))
    (=/= ((_.1 _.2))) (sym _.0 _.1 _.2))
  (((lambda (_.0) ((_.0 _.0) _.0)) (lambda (y) y)) (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) _.1)) _.0))
     ((lambda (_.3) _.3) (lambda (y) y)))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0 _.1 _.3))
  ((((lambda (_.0) (lambda (_.1) ((lambda (_.2) _.0) _.1)))
      (lambda (y) y))
     (lambda (_.3) _.4))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0 _.1))
  ((((lambda (_.0) (lambda (_.1) (_.1 (lambda (_.2) _.0))))
      (lambda (y) y))
     (lambda (_.3) (_.3 _.3)))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0 _.1 _.3))
  (((lambda (_.0) (_.0 (lambda (_.1) (_.1 _.1))))
     ((lambda (_.2) (lambda (_.3) (_.3 (lambda (_.4) _.2))))
       (lambda (y) y)))
    (=/= ((_.2 _.3)) ((_.2 _.4))) (sym _.0 _.1 _.2 _.3))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 (lambda (_.2) _.0)))
        (lambda (_.3) (_.3 _.3))))
     (lambda (y) y))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0 _.1 _.3))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) _.1)) (_.0 _.0)))
     (lambda (y) y))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 _.0)) (lambda (_.2) _.0)))
     (lambda (y) y))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0 _.1))
  ((((lambda (_.0) _.0) (lambda (_.1) (_.1 _.1)))
     ((lambda (_.2) (lambda (_.3) _.2)) (lambda (y) y)))
    (=/= ((_.2 _.3))) (sym _.0 _.1 _.2))
  (((lambda (_.0) ((lambda (_.1) (_.1 _.0)) (_.0 _.0)))
     (lambda (y) y))
    (=/= ((_.0 _.1))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) _.1)) (_.0 _.0)))
     (lambda (y) y))
    (=/= ((_.1 _.2))) (sym _.0 _.1))
  (((lambda (_.0) (_.0 _.0))
     ((lambda (_.1)
        (lambda (_.2)
          ((lambda (_.3) _.1) (lambda (_.4) _.5))))
       (lambda (y) y)))
    (=/= ((_.1 _.2)) ((_.1 _.3))) (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) _.1) (_.0 _.0)))
     ((lambda (_.2) _.2) (lambda (y) y)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 _.1))
        (lambda (_.2) (_.2 (lambda (_.3) _.0)))))
     (lambda (y) y))
    (=/= ((_.0 _.2)) ((_.0 _.3))) (sym _.0 _.1 _.2))
  ((((lambda (_.0) _.0)
      (lambda (_.1) ((lambda (_.2) _.2) _.1)))
     ((lambda (_.3) _.3) (lambda (y) y)))
    (sym _.0 _.1 _.2 _.3))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) _.1)) (_.0 _.0)))
     (lambda (y) y))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) (lambda (_.3) _.4)))
        _.0))
     (lambda (y) y))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0))
  (((lambda (_.0) ((lambda (_.1) _.0) (_.0 _.0)))
     ((lambda (_.2) _.2) (lambda (y) y)))
    (=/= ((_.0 _.1))) (sym _.0 _.2))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 _.0)) (lambda (_.2) _.2)))
     ((lambda (_.3) _.3) (lambda (y) y)))
    (=/= ((_.0 _.1))) (sym _.0 _.1 _.2 _.3))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) (lambda (_.3) _.4)))
        (_.0 _.0)))
     (lambda (y) y))
    (=/= ((_.1 _.2))) (sym _.0 _.1))
  (((lambda (_.0) (_.0 _.0))
     ((lambda (_.1)
        (lambda (_.2)
          (_.2 (lambda (_.3) (_.3 (lambda (_.4) _.1))))))
       (lambda (y) y)))
    (=/= ((_.1 _.2)) ((_.1 _.3)) ((_.1 _.4)))
    (sym _.0 _.1 _.2 _.3))
  ((((lambda (_.0) _.0)
      (lambda (_.1) (_.1 (lambda (_.2) _.3))))
     ((lambda (_.4) (lambda (_.5) _.4)) (lambda (y) y)))
    (=/= ((_.4 _.5))) (sym _.0 _.1 _.4))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) _.1))
        (lambda (_.3) _.4)))
     ((lambda (_.5) _.5) (lambda (y) y)))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0 _.1 _.5))
  ((((lambda (_.0) (lambda (_.1) (_.1 (lambda (_.2) _.0))))
      (lambda (y) y))
     (lambda (_.3) (_.3 (lambda (_.4) _.5))))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0 _.1 _.3))
  (((lambda (_.0)
      (_.0 (lambda (_.1) (_.1 (lambda (_.2) _.3)))))
     ((lambda (_.4) (lambda (_.5) (_.5 (lambda (_.6) _.4))))
       (lambda (y) y)))
    (=/= ((_.4 _.5)) ((_.4 _.6))) (sym _.0 _.1 _.4 _.5))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 (lambda (_.2) _.0)))
        (lambda (_.3) (_.3 (lambda (_.4) _.5)))))
     (lambda (y) y))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0 _.1 _.3))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 _.1))
        (lambda (_.2) ((lambda (_.3) _.0) _.2))))
     (lambda (y) y))
    (=/= ((_.0 _.2)) ((_.0 _.3))) (sym _.0 _.1 _.2))
  (((lambda (_.0) (_.0 (_.0 _.0)))
     ((lambda (_.1) (lambda (_.2) _.1)) (lambda (y) y)))
    (=/= ((_.1 _.2))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) (_.2 _.2)) _.1))
        (_.0 _.0)))
     (lambda (y) y))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) (lambda (_.3) _.4)))
        (_.0 _.0)))
     (lambda (y) y))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0))
  (((lambda (_.0) (_.0 _.0))
     ((lambda (_.1) (_.1 _.1)) (lambda (y) y)))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) (_.2 _.2)) _.1)) _.0))
     ((lambda (_.3) _.3) (lambda (y) y)))
    (sym _.0 _.1 _.2 _.3))
  ((((lambda (_.0) _.0)
      (lambda (_.1) ((lambda (_.2) _.1) _.1)))
     ((lambda (_.3) _.3) (lambda (y) y)))
    (=/= ((_.1 _.2))) (sym _.0 _.1 _.3))
  ((((lambda (_.0)
       (lambda (_.1) ((lambda (_.2) (_.2 _.2)) _.1)))
      (lambda (_.3) _.4))
     (lambda (y) y))
    (sym _.1 _.2))
  ((((lambda (_.0) _.0)
      (lambda (_.1)
        ((lambda (_.2) (_.2 _.2)) (lambda (_.3) _.1))))
     (lambda (y) y))
    (=/= ((_.1 _.3))) (sym _.0 _.1 _.2))
  (((lambda (_.0) ((lambda (_.1) (_.1 _.1)) (_.0 _.0)))
     ((lambda (_.2) _.2) (lambda (y) y)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) (lambda (_.3) _.4)))
        _.0))
     ((lambda (_.5) _.5) (lambda (y) y)))
    (=/= ((_.1 _.2))) (sym _.0 _.1 _.5))
  ((((lambda (_.0)
       (lambda (_.1) ((lambda (_.2) _.1) (lambda (_.3) _.4))))
      (lambda (_.5) _.6))
     (lambda (y) y))
    (=/= ((_.1 _.2))) (sym _.1))
  (((lambda (_.0) ((_.0 _.0) _.0))
     ((lambda (_.1) _.1) (lambda (y) y)))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) (_.2 _.2)) _.1))
        (lambda (_.3) _.0)))
     (lambda (y) y))
    (=/= ((_.0 _.3))) (sym _.0 _.1 _.2))
  (((lambda (_.0)
      ((lambda (_.1) _.0) (_.0 (lambda (_.2) _.3))))
     (lambda (y) y))
    (=/= ((_.0 _.1))) (sym _.0))
  (((lambda (_.0) ((lambda (_.1) (_.1 _.0)) _.0))
     ((lambda (_.2) (lambda (_.3) _.2)) (lambda (y) y)))
    (=/= ((_.0 _.1)) ((_.2 _.3))) (sym _.0 _.1 _.2))
  ((((lambda (_.0) _.0)
      (lambda (_.1)
        ((lambda (_.2) ((lambda (_.3) _.3) _.2)) _.1)))
     (lambda (y) y))
    (sym _.0 _.1 _.2 _.3)))
> (((lambda (_.0) _.0)
      (lambda (_.1)
        ((lambda (_.2) ((lambda (_.3) _.3) _.2)) _.1)))
     (lambda (y) y))
#<procedure>
> ((((lambda (_.0) _.0)
      (lambda (_.1)
        ((lambda (_.2) ((lambda (_.3) _.3) _.2)) _.1)))
     (lambda (y) y))
   42)
42
> 'foo
foo
> '5
5
> (load "interpo.scm")
> (run 1 (q) 
    (eval-expro 
     q
     '()
     '(closure y y ())))
Unhandled exception
 Condition components:
   1. &undefined
   2. &who: eval
   3. &message: "unbound variable"
   4. &irritants: (datum)
> (load "interpo.scm")
> (run 1 (q) 
    (eval-expro 
     q
     '()
     '(closure y y ())))
('(closure y y ()))
> (run 2 (q) 
    (eval-expro 
     q
     '()
     '(closure y y ())))
('(closure y y ()) (lambda (y) y))
> (load "interpo.scm")
> (run 2 (q) 
    (eval-expro 
     q
     '()
     '(closure y y ())))
((lambda (y) y)
  (((lambda (_.0) _.0) (lambda (y) y)) (sym _.0)))
> ((lambda (f) (f 5))
   (lambda (x) x))
5
> ((lambda (g) (g 5))
   (lambda (x) x))
5
> ((lambda (lambda) (lambda 5))
   (lambda (x) x))
5
> ((lambda (quote) (quote 5))
   (lambda (x) x))
5
> ((lambda (quote) (quote 5))
   (lambda (x) 6))
6
> (load "interpo.scm")
> (run* (q) 
    (eval-expro 
     '((lambda (quote) (quote (lambda (y) y)))
       (lambda (x) (quote 6)))
     '()
     q))
((lambda (y) y)
 6)
> (load "interpo.scm")
> (run* (q) 
    (eval-expro 
     '((lambda (quote) (quote (lambda (y) y)))
       (lambda (x) (quote 6)))
     '()
     q))
(6)
> (load "interpo.scm")
> (run* (q) 
    (eval-expro 
     '(cons (quote 4) (quote 5))
     '()
     q))
((4 . 5))
> (load "interpo.scm")
> (run* (q) 
    (eval-expro 
     '(cons (quote 4) (quote 5))
     '()
     q))
((4 . 5))
> (run 1 (q) 
    (eval-expro 
     q
     '()
     q))
((((lambda (_.0)
     (cons _.0 (cons (cons 'quote (cons _.0 '())) '())))
    '(lambda (_.0)
       (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))))
   (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote)))
   (sym _.0)))
> ((lambda (_.0)
     (cons _.0 (cons (cons 'quote (cons _.0 '())) '())))
    '(lambda (_.0)
       (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))))
((lambda (_.0)
   (cons _.0 (cons (cons 'quote (cons _.0 '())) '())))
  '(lambda (_.0)
     (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))))
> (run 2 (q) 
    (eval-expro 
     q
     '()
     q))
((((lambda (_.0)
     (cons _.0 (cons (cons 'quote (cons _.0 '())) '())))
    '(lambda (_.0)
       (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))))
   (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote)))
   (sym _.0))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) _.1) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) _.1) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)))
    (sym _.0 _.1)))
> ((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) _.1) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) _.1) '())))))
((lambda (_.0)
   (cons _.0
     (cons (cons 'quote (cons _.0 '()))
       ((lambda (_.1) _.1) '()))))
  '(lambda (_.0)
     (cons _.0
       (cons (cons 'quote (cons _.0 '()))
         ((lambda (_.1) _.1) '())))))
> (run 4 (q) 
    (eval-expro 
     q
     '()
     q))
((((lambda (_.0)
     (cons _.0 (cons (cons 'quote (cons _.0 '())) '())))
    '(lambda (_.0)
       (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))))
   (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote)))
   (sym _.0))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) _.1) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) _.1) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) '_.2))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) '_.2)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.1) (closure _.2)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.1))))
> (run 10 (q) 
    (eval-expro 
     q
     '()
     q))
((((lambda (_.0)
     (cons _.0 (cons (cons 'quote (cons _.0 '())) '())))
    '(lambda (_.0)
       (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))))
   (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote)))
   (sym _.0))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) _.1) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) _.1) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) '_.2))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) '_.2)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.1) (closure _.2)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.1)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) (lambda (_.2) _.3)))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) (lambda (_.2) _.3))))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '())) '())))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '())) '()))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote)))
    (sym _.0))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.2) '())) '_.3))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.2) '())) '_.3)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 closure)))
    (sym _.0 _.2) (absento (closure _.1) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) '()) '_.3)) '_.4))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) '()) '_.3)) '_.4)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.1) '_.3)) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.1) '_.3)) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 _.2)) ((_.1 closure)) ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.2) _.1)) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.2) _.1)) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 closure)))
    (sym _.0 _.1 _.2)))
> (run 20 (q) 
    (eval-expro 
     q
     '()
     q))
((((lambda (_.0)
     (cons _.0 (cons (cons 'quote (cons _.0 '())) '())))
    '(lambda (_.0)
       (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))))
   (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote)))
   (sym _.0))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) _.1) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) _.1) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) '_.2))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) '_.2)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.1) (closure _.2)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.1)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) (lambda (_.2) _.3)))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) (lambda (_.2) _.3))))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '())) '())))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '())) '()))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote)))
    (sym _.0))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.2) '())) '_.3))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.2) '())) '_.3)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 closure)))
    (sym _.0 _.2) (absento (closure _.1) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) '()) '_.3)) '_.4))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) '()) '_.3)) '_.4)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.1) '_.3)) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.1) '_.3)) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 _.2)) ((_.1 closure)) ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.2) _.1)) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.2) _.1)) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 closure)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) _.1) '()))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) _.1) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) '_.2))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) '_.2)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.1) (closure _.2)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) '()) _.1)) '_.3))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) '()) _.1)) '_.3)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.1) _.1)) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.1) _.1)) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 _.2)) ((_.1 closure)))
    (sym _.0 _.1) (absento (closure _.2)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.2) '())) _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.2) '())) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 closure)))
    (sym _.0 _.2) (absento (closure _.1)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) _.0))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.1)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) '()) '_.3)) _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) '()) '_.3)) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) '()) (lambda (_.3) _.4)))
            '_.5))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) '()) (lambda (_.3) _.4)))
              '_.5)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          '())))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            '()))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.3) '())) '_.4))
            '_.5))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.3) '())) '_.4))
              '_.5)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)) ((_.3 closure)))
    (sym _.0 _.3)
    (absento (closure _.1) (closure _.2) (closure _.4)
      (closure _.5))))
> (run 100 (q) 
    (eval-expro 
     q
     '()
     q))
((((lambda (_.0)
     (cons _.0 (cons (cons 'quote (cons _.0 '())) '())))
    '(lambda (_.0)
       (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))))
   (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote)))
   (sym _.0))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) _.1) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) _.1) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) '_.2))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) '_.2)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.1) (closure _.2)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.1)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) (lambda (_.2) _.3)))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) (lambda (_.2) _.3))))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '())) '())))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '())) '()))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote)))
    (sym _.0))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.2) '())) '_.3))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.2) '())) '_.3)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 closure)))
    (sym _.0 _.2) (absento (closure _.1) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) '()) '_.3)) '_.4))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) '()) '_.3)) '_.4)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.1) '_.3)) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.1) '_.3)) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 _.2)) ((_.1 closure)) ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.2) _.1)) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.2) _.1)) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 closure)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) _.1) '()))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) _.1) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) '_.2))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) '_.2)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.1) (closure _.2)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) '()) _.1)) '_.3))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) '()) _.1)) '_.3)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.1) _.1)) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.1) _.1)) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 _.2)) ((_.1 closure)))
    (sym _.0 _.1) (absento (closure _.2)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.2) '())) _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.2) '())) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 closure)))
    (sym _.0 _.2) (absento (closure _.1)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) _.0))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.1)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) '()) '_.3)) _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) '()) '_.3)) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) '()) (lambda (_.3) _.4)))
            '_.5))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) '()) (lambda (_.3) _.4)))
              '_.5)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          '())))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            '()))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.3) '())) '_.4))
            '_.5))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.3) '())) '_.4))
              '_.5)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)) ((_.3 closure)))
    (sym _.0 _.3)
    (absento (closure _.1) (closure _.2) (closure _.4)
      (closure _.5)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) _.1) (lambda (_.3) _.4)))
            '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) _.1) (lambda (_.3) _.4)))
              '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 _.2)) ((_.1 closure)))
    (sym _.0 _.1)
    (absento (closure _.2) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) (lambda (_.2) _.3)))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) (lambda (_.2) _.3))))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.0) '_.2)
        (cons (cons 'quote (cons _.0 '())) '())))
     '(lambda (_.0)
        (cons ((lambda (_.1) _.0) '_.2)
          (cons (cons 'quote (cons _.0 '())) '()))))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)))
    (sym _.0) (absento (closure _.1) (closure _.2)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.2) '())) '_.3))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.2) '())) '_.3)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 closure)))
    (sym _.0 _.2) (absento (closure _.1) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) '()) '_.4)) '_.5))
            '_.6))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) '()) '_.4))
                 '_.5))
              '_.6)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4) (closure _.5) (closure _.6)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) '()) '_.3)) '_.4))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) '()) '_.3)) '_.4)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) '()))
            '_.5))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) '()))
              '_.5)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 _.3)) ((_.2 closure))
      ((_.2 quote)))
    (sym _.0 _.2)
    (absento (closure _.1) (closure _.3) (closure _.4)
      (closure _.5)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) '()) _.1)) _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) '()) _.1)) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.2)))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2) _.2) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2) _.2) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 closure)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2) '()) '_.3))))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2) '()) '_.3)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.1) '_.3)) '()))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.1) '_.3)) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 _.2)) ((_.1 closure)) ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.3) _.2)) '()))
            '_.4))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.3) _.2)) '()))
              '_.4)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 closure)) ((_.3 closure)))
    (sym _.0 _.2 _.3) (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.1) '_.4)) '_.5))
            '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.1) '_.4))
                 '_.5))
              '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 _.2)) ((_.1 _.3)) ((_.1 closure)) ((_.1 quote))
      ((_.2 quote)))
    (sym _.0 _.1)
    (absento (closure _.2) (closure _.3) (closure _.4)
      (closure _.5)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) (_.1 '())) (lambda (_.2) _.2)))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) (_.1 '())) (lambda (_.2) _.2))))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.1 quote)) ((_.2 closure)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) (_.1 '_.2)) (lambda (_.3) '())))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) (_.1 '_.2)) (lambda (_.3) '()))))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.1 quote)) ((_.3 quote)))
    (sym _.0 _.1) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.2) _.1)) '()))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.2) _.1)) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 closure)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2) '()) _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2) '()) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.2)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.0) '_.2)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.3) _.3) '()))))
     '(lambda (_.0)
        (cons ((lambda (_.1) _.0) '_.2)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.3) _.3) '())))))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.3 closure)))
    (sym _.0 _.3) (absento (closure _.1) (closure _.2)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.0) '_.2)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.3) '()) '_.4))))
     '(lambda (_.0)
        (cons ((lambda (_.1) _.0) '_.2)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.3) '()) '_.4)))))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.3 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) '()) _.2)) '_.4))
            '_.5))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) '()) _.2)) '_.4))
              '_.5)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 closure)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.0 _.2)
    (absento (closure _.1) (closure _.3) (closure _.4)
      (closure _.5)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) '()) _.1)) '_.3))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) '()) _.1)) '_.3)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons _.0 (cons (cons _.1 (cons _.0 '())) '())))
        'quote))
     '(lambda (_.0)
        ((lambda (_.1)
           (cons _.0 (cons (cons _.1 (cons _.0 '())) '())))
          'quote)))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.1 closure)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons _.0
        ((lambda (_.1) (cons (cons _.1 (cons _.0 '())) '()))
          'quote)))
     '(lambda (_.0)
        (cons _.0
          ((lambda (_.1)
             (cons (cons _.1 (cons _.0 '())) '()))
            'quote))))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.1 closure)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.2) _.2)) '()))
            '_.4))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.2) _.2)) '()))
              '_.4)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 _.3)) ((_.2 closure)))
    (sym _.0 _.2)
    (absento (closure _.1) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2) '()) (lambda (_.3) _.4)))))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2) '()) (lambda (_.3) _.4))))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 quote)))
    (sym _.0 _.1)
    (absento (closure _.2) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.1) _.1)) '()))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.1) _.1)) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 _.2)) ((_.1 closure)))
    (sym _.0 _.1) (absento (closure _.2)))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2) ((lambda (_.3) _.3) '())) '_.4))))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2) ((lambda (_.3) _.3) '())) '_.4)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 quote)) ((_.3 closure)))
    (sym _.0 _.1 _.3) (absento (closure _.2) (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.3) '())) _.1))
            '_.4))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.3) '())) _.1))
              '_.4)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.1 quote)) ((_.2 quote))
      ((_.3 closure)))
    (sym _.0 _.1 _.3) (absento (closure _.2) (closure _.4)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.2) '())) _.0))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.2) '())) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 closure)))
    (sym _.0 _.2) (absento (closure _.1)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.1) _.2)) '_.4))
            '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.1) _.2)) '_.4))
              '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 _.2)) ((_.1 _.3)) ((_.1 closure)) ((_.1 quote))
      ((_.2 closure)))
    (sym _.0 _.1 _.2) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2) ((lambda (_.3) '()) '_.4)) '_.5))))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2) ((lambda (_.3) '()) '_.4)) '_.5)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 quote)) ((_.3 quote)))
    (sym _.0 _.1)
    (absento (closure _.2) (closure _.3) (closure _.4)
      (closure _.5)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) '()) (lambda (_.3) _.4)))
            _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) '()) (lambda (_.3) _.4)))
              _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 _.3)) ((_.2 closure))
      ((_.2 quote)))
    (sym _.0 _.1 _.2) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.0) '_.2)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.3) '()) _.0))))
     '(lambda (_.0)
        (cons ((lambda (_.1) _.0) '_.2)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.3) '()) _.0)))))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.3 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) '()) '_.3)) _.0))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) '()) '_.3)) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.3) '())) '_.4))
            _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.3) '())) '_.4))
              _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)) ((_.3 closure)))
    (sym _.0 _.3)
    (absento (closure _.1) (closure _.2) (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) '()) _.0)) '_.3))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) '()) _.0)) '_.3)))))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) (_.1 _.1)) (lambda (_.2) '())))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) (_.1 _.1)) (lambda (_.2) '()))))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.2)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) '()) '_.4)) _.1))
            '_.5))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) '()) '_.4)) _.1))
              '_.5)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.1 quote)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.0 _.1)
    (absento (closure _.2) (closure _.3) (closure _.4)
      (closure _.5)))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2) ((lambda (_.3) _.3) _.2)) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2) ((lambda (_.3) _.3) _.2)) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 closure)) ((_.3 closure)))
    (sym _.0 _.1 _.2 _.3))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons _.0
           (cons (cons _.1 (cons _.0 '()))
             ((lambda (_.2) _.2) '()))))
        'quote))
     '(lambda (_.0)
        ((lambda (_.1)
           (cons _.0
             (cons (cons _.1 (cons _.0 '()))
               ((lambda (_.2) _.2) '()))))
          'quote)))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.1 closure)) ((_.1 cons))
      ((_.1 quote)) ((_.2 closure)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      (cons _.0
        ((lambda (_.1)
           (cons (cons _.1 (cons _.0 '()))
             ((lambda (_.2) _.2) '())))
          'quote)))
     '(lambda (_.0)
        (cons _.0
          ((lambda (_.1)
             (cons (cons _.1 (cons _.0 '()))
               ((lambda (_.2) _.2) '())))
            'quote))))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.1 closure)) ((_.1 cons))
      ((_.1 quote)) ((_.2 closure)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) '()) (cons '_.2 '_.3)))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) '()) (cons '_.2 '_.3))))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) _.1))
            '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) _.1))
              '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.1 quote)) ((_.2 _.3))
      ((_.2 closure)) ((_.2 quote)))
    (sym _.0 _.1 _.2) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons _.0
           (cons (cons _.1 (cons _.0 '()))
             ((lambda (_.2) '()) '_.3))))
        'quote))
     '(lambda (_.0)
        ((lambda (_.1)
           (cons _.0
             (cons (cons _.1 (cons _.0 '()))
               ((lambda (_.2) '()) '_.3))))
          'quote)))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.1 closure)) ((_.1 cons))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        ((lambda (_.1)
           (cons (cons _.1 (cons _.0 '()))
             ((lambda (_.2) '()) '_.3)))
          'quote)))
     '(lambda (_.0)
        (cons _.0
          ((lambda (_.1)
             (cons (cons _.1 (cons _.0 '()))
               ((lambda (_.2) '()) '_.3)))
            'quote))))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.1 closure)) ((_.1 cons))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) '()) (lambda (_.3) _.4)))
            '_.5))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) '()) (lambda (_.3) _.4)))
              '_.5)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) _.1) _.0)) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) _.1) _.0)) '())))))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.1 _.2)) ((_.1 closure)))
    (sym _.0 _.1) (absento (closure _.2)))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2) ((lambda (_.3) '()) _.2)) '_.4))))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2) ((lambda (_.3) '()) _.2)) '_.4)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 closure)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.0 _.1 _.2) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2)
                ((lambda (_.3) _.2) (lambda (_.4) _.5)))
               '()))
            '_.6))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2)
                  ((lambda (_.3) _.2) (lambda (_.4) _.5)))
                 '()))
              '_.6)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 _.3)) ((_.2 closure)))
    (sym _.0 _.2)
    (absento (closure _.1) (closure _.3) (closure _.4)
      (closure _.5) (closure _.6)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) '()) '_.4)) '_.5))
            _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) '()) '_.4))
                 '_.5))
              _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2)
                ((lambda (_.3) '()) (lambda (_.4) _.5)))
               '_.6))
            '_.7))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2)
                  ((lambda (_.3) '()) (lambda (_.4) _.5)))
                 '_.6))
              '_.7)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4) (closure _.5) (closure _.6)
      (closure _.7)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.3) _.2)) _.1))
            '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.3) _.2)) _.1))
              '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 closure)) ((_.3 closure)))
    (sym _.0 _.1 _.2 _.3))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) '()))
            _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) '()))
              _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 _.3)) ((_.2 closure))
      ((_.2 quote)))
    (sym _.0 _.2)
    (absento (closure _.1) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.1) '_.4)) _.1))
            '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.1) '_.4)) _.1))
              '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 _.2)) ((_.1 _.3)) ((_.1 closure)) ((_.1 quote))
      ((_.2 quote)))
    (sym _.0 _.1)
    (absento (closure _.2) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          '())))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            '()))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.3) '())) '_.4))
            '_.5))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.3) '())) '_.4))
              '_.5)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)) ((_.3 closure)))
    (sym _.0 _.3)
    (absento (closure _.1) (closure _.2) (closure _.4)
      (closure _.5)))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2) ((lambda (_.3) _.2) _.2)) '()))))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2) ((lambda (_.3) _.2) _.2)) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 _.3)) ((_.2 closure)))
    (sym _.0 _.1 _.2) (absento (closure _.3)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) _.1) (lambda (_.3) _.4)))
            '()))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) _.1) (lambda (_.3) _.4)))
              '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 _.2)) ((_.1 closure)))
    (sym _.0 _.1)
    (absento (closure _.2) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2)
                ((lambda (_.3) ((lambda (_.4) _.4) _.3)) '()))
               '_.5))
            '_.6))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2)
                  ((lambda (_.3) ((lambda (_.4) _.4) _.3))
                    '()))
                 '_.5))
              '_.6)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)) ((_.3 closure))
      ((_.4 closure)))
    (sym _.0 _.3 _.4)
    (absento (closure _.1) (closure _.2) (closure _.5)
      (closure _.6)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.0) '_.2)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.3) '()) (lambda (_.4) _.5)))))
     '(lambda (_.0)
        (cons ((lambda (_.1) _.0) '_.2)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.3) '()) (lambda (_.4) _.5))))))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.3 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2) ((lambda (_.3) _.3) '())) _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2) ((lambda (_.3) _.3) '())) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 quote)) ((_.3 closure)))
    (sym _.0 _.1 _.3) (absento (closure _.2)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) _.0)
        (cons (cons 'quote (cons _.0 '())) '())))
     '(lambda (_.0)
        (cons ((lambda (_.1) _.1) _.0)
          (cons (cons 'quote (cons _.0 '())) '()))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.3) _.2)) '()))
            _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.3) _.2)) '()))
              _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 closure)) ((_.3 closure)))
    (sym _.0 _.2 _.3) (absento (closure _.1)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.0) '_.2)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.3) ((lambda (_.4) _.4) '())) '_.5))))
     '(lambda (_.0)
        (cons ((lambda (_.1) _.0) '_.2)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.3) ((lambda (_.4) _.4) '())) '_.5)))))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.3 quote)) ((_.4 closure)))
    (sym _.0 _.4)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.5)))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons _.0
           (cons (cons _.1 (cons _.0 '()))
             ((lambda (_.2) '()) _.1))))
        'quote))
     '(lambda (_.0)
        ((lambda (_.1)
           (cons _.0
             (cons (cons _.1 (cons _.0 '()))
               ((lambda (_.2) '()) _.1))))
          'quote)))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.1 closure)) ((_.1 cons))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.2)))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2) ((lambda (_.3) '()) '_.4)) _.0))))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2) ((lambda (_.3) '()) '_.4)) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 quote)) ((_.3 quote)))
    (sym _.0 _.1)
    (absento (closure _.2) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        ((lambda (_.1)
           (cons (cons _.1 (cons _.0 '()))
             ((lambda (_.2) '()) _.1)))
          'quote)))
     '(lambda (_.0)
        (cons _.0
          ((lambda (_.1)
             (cons (cons _.1 (cons _.0 '()))
               ((lambda (_.2) '()) _.1)))
            'quote))))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.1 closure)) ((_.1 cons))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.2)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) '()) '_.4)) '_.5))
            '_.6))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) '()) '_.4))
                 '_.5))
              '_.6)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4) (closure _.5) (closure _.6)))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons 'quote (cons _.0 ((lambda (_.1) _.1) '())))
          '())))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons 'quote (cons _.0 ((lambda (_.1) _.1) '())))
            '()))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) '()))
            '_.5))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) '()))
              '_.5)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 _.3)) ((_.2 closure))
      ((_.2 quote)))
    (sym _.0 _.2)
    (absento (closure _.1) (closure _.3) (closure _.4)
      (closure _.5)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2)
                ((lambda (_.3) _.1) (lambda (_.4) _.5)))
               '_.6))
            '()))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2)
                  ((lambda (_.3) _.1) (lambda (_.4) _.5)))
                 '_.6))
              '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 _.2)) ((_.1 _.3)) ((_.1 closure)) ((_.1 quote)))
    (sym _.0 _.1)
    (absento (closure _.2) (closure _.3) (closure _.4)
      (closure _.5) (closure _.6)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.0) '_.2)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.3) ((lambda (_.4) '()) '_.5)) '_.6))))
     '(lambda (_.0)
        (cons ((lambda (_.1) _.0) '_.2)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.3) ((lambda (_.4) '()) '_.5)) '_.6)))))
    (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 cons))
      ((_.0 quote)) ((_.3 quote)) ((_.4 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.4) (closure _.5) (closure _.6)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1) ((lambda (_.2) '()) _.1)) _.0))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1) ((lambda (_.2) '()) _.1)) _.0)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.2)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2)
                ((lambda (_.3) ((lambda (_.4) _.3) _.3)) '()))
               '_.5))
            '_.6))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2)
                  ((lambda (_.3) ((lambda (_.4) _.3) _.3))
                    '()))
                 '_.5))
              '_.6)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)) ((_.3 _.4))
      ((_.3 closure)))
    (sym _.0 _.3)
    (absento (closure _.1) (closure _.2) (closure _.4)
      (closure _.5) (closure _.6)))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2) _.2) '()))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2) _.2) '())))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 closure)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      (cons (cons 'lambda _.0)
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2) '()) '_.3))))
     '((_.0)
        (cons (cons 'lambda _.0)
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2) '()) '_.3)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2)
                ((lambda (_.3) ((lambda (_.4) '()) _.3))
                  '_.5))
               '_.6))
            '_.7))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2)
                  ((lambda (_.3) ((lambda (_.4) '()) _.3))
                    '_.5))
                 '_.6))
              '_.7)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)) ((_.3 closure))
      ((_.3 quote)) ((_.4 quote)))
    (sym _.0 _.3)
    (absento (closure _.1) (closure _.2) (closure _.4)
      (closure _.5) (closure _.6) (closure _.7)))
  (((lambda (_.0)
      (cons _.0
        (cons (cons 'quote (cons _.0 '()))
          ((lambda (_.1)
             ((lambda (_.2)
                ((lambda (_.3) ((lambda (_.4) _.4) '()))
                  '_.5))
               '_.6))
            '_.7))))
     '(lambda (_.0)
        (cons _.0
          (cons (cons 'quote (cons _.0 '()))
            ((lambda (_.1)
               ((lambda (_.2)
                  ((lambda (_.3) ((lambda (_.4) _.4) '()))
                    '_.5))
                 '_.6))
              '_.7)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)) ((_.3 quote))
      ((_.4 closure)))
    (sym _.0 _.4)
    (absento (closure _.1) (closure _.2) (closure _.3)
      (closure _.5) (closure _.6) (closure _.7)))
  (((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2)
             ((lambda (_.3) '()) (lambda (_.4) _.5)))
            '_.6))))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2)
               ((lambda (_.3) '()) (lambda (_.4) _.5)))
              '_.6)))))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote))
      ((_.1 closure)) ((_.2 quote)) ((_.3 quote)))
    (sym _.0 _.1)
    (absento (closure _.2) (closure _.3) (closure _.4)
      (closure _.5) (closure _.6))))
> ((lambda (_.0)
      (cons _.0
        (cons
          (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
          ((lambda (_.2)
             ((lambda (_.3) '()) (lambda (_.4) _.5)))
            '_.6))))
     '(lambda (_.0)
        (cons _.0
          (cons
            (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
            ((lambda (_.2)
               ((lambda (_.3) '()) (lambda (_.4) _.5)))
              '_.6)))))
((lambda (_.0)
   (cons _.0
     (cons (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
       ((lambda (_.2)
          ((lambda (_.3) '()) (lambda (_.4) _.5)))
         '_.6))))
  '(lambda (_.0)
     (cons _.0
       (cons
         (cons ((lambda (_.1) _.1) 'quote) (cons _.0 '()))
         ((lambda (_.2)
            ((lambda (_.3) '()) (lambda (_.4) _.5)))
           '_.6)))))
> (run 1 (q p)
    (=/= q p)
    (eval-expro q '() p)
    (eval-expro p '() q))
((('((lambda (_.0)
       (cons 'quote
         (cons
           (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))
           '())))
      '(lambda (_.0)
         (cons 'quote
           (cons
             (cons _.0
               (cons (cons 'quote (cons _.0 '())) '()))
             '()))))
    ((lambda (_.0)
       (cons 'quote
         (cons
           (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))
           '())))
      '(lambda (_.0)
         (cons 'quote
           (cons
             (cons _.0
               (cons (cons 'quote (cons _.0 '())) '()))
             '())))))
   (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote)))
   (sym _.0)))
> '((lambda (_.0)
       (cons 'quote
         (cons
           (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))
           '())))
      '(lambda (_.0)
         (cons 'quote
           (cons
             (cons _.0
               (cons (cons 'quote (cons _.0 '())) '()))
             '()))))
((lambda (_.0)
   (cons 'quote
     (cons
       (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))
       '())))
  '(lambda (_.0)
     (cons 'quote
       (cons
         (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))
         '()))))
> ((lambda (_.0)
   (cons 'quote
     (cons
       (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))
       '())))
  '(lambda (_.0)
     (cons 'quote
       (cons
         (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))
         '()))))
'((lambda (_.0)
    (cons 'quote
      (cons
        (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))
        '())))
   '(lambda (_.0)
      (cons 'quote
        (cons
          (cons _.0 (cons (cons 'quote (cons _.0 '())) '()))
          '()))))
> (run 99 (q) (eval-expro q '() '(I love you)))
('(I love you) (cons 'I '(love you))
  (((lambda (_.0) '(I love you)) '_.1) (=/= ((_.0 quote)))
    (absento (closure _.1)))
  (((lambda (_.0) _.0) '(I love you)) (sym _.0))
  (((lambda (_.0) '(I love you)) (lambda (_.1) _.2))
    (=/= ((_.0 quote))))
  (cons 'I (cons 'love '(you)))
  ((cons ((lambda (_.0) 'I) '_.1) '(love you))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  ((cons ((lambda (_.0) _.0) 'I) '(love you)) (sym _.0))
  (((lambda (_.0) (cons 'I '(love you))) '_.1)
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.1)))
  ((cons 'I ((lambda (_.0) '(love you)) '_.1))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0) (cons 'I _.0)) '(love you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons 'I ((lambda (_.0) _.0) '(love you))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1) (cons 'love '(you)))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0) (cons _.0 '(love you))) 'I)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) '_.2)) '_.3)
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) (cons 'I '(love you))) (lambda (_.1) _.2))
    (=/= ((_.0 cons)) ((_.0 quote))))
  (((lambda (_.0) ((lambda (_.1) _.1) '(I love you))) '_.2)
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  (((lambda (_.0) '(I love you)) (cons '_.1 '_.2))
    (=/= ((_.0 quote)))
    (absento (closure _.1) (closure _.2)))
  ((cons 'I ((lambda (_.0) '(love you)) (lambda (_.1) _.2)))
    (=/= ((_.0 quote))))
  (cons 'I (cons 'love (cons 'you '())))
  (((lambda (_.0) _.0) (cons 'I '(love you))) (sym _.0))
  ((cons ((lambda (_.0) _.0) 'I) (cons 'love '(you)))
    (sym _.0))
  (((lambda (_.0) ((lambda (_.1) _.0) '_.2)) '(I love you))
    (=/= ((_.0 _.1)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) '(love you)) '_.3))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  ((cons 'I (cons ((lambda (_.0) 'love) '_.1) '(you)))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2)) '(love you))
    (=/= ((_.0 quote))))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) _.0)) '_.2)
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0) (_.0 '_.1)) (lambda (_.2) '(I love you)))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) _.2) '(love you)))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  (((lambda (_.0) ((lambda (_.1) _.1) _.0)) '(I love you))
    (sym _.0 _.1))
  ((cons 'I (cons ((lambda (_.0) _.0) 'love) '(you)))
    (sym _.0))
  (((lambda (_.0) (_.0 '(I love you))) (lambda (_.1) _.1))
    (=/= ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0) (cons 'I (cons 'love '(you)))) '_.1)
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.1)))
  ((cons 'I ((lambda (_.0) (cons 'love '(you))) '_.1))
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.1)))
  ((cons 'I (cons 'love ((lambda (_.0) '(you)) '_.1)))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1) '(I love you)) (lambda (_.2) _.3)))
     '_.4)
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.4)))
  (((lambda (_.0) ((lambda (_.1) _.0) _.0)) '(I love you))
    (=/= ((_.0 _.1))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) '(love you)) (lambda (_.3) _.4)))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love (cons 'you '())))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) '(love you)) '_.2))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2)))
  (((lambda (_.0) (cons 'I '(love you))) (cons '_.1 '_.2))
    (=/= ((_.0 cons)) ((_.0 quote)))
    (absento (closure _.1) (closure _.2)))
  (((lambda (_.0) '(I love you))
     (cons '_.1 (lambda (_.2) _.3)))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0) (cons 'I (cons 'love _.0))) '(you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  (((lambda (_.0) (_.0 _.0)) (lambda (_.1) '(I love you)))
    (=/= ((_.1 quote))) (sym _.0))
  ((cons 'I ((lambda (_.0) (cons 'love _.0)) '(you)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons 'I (cons 'love ((lambda (_.0) _.0) '(you))))
    (sym _.0))
  (((lambda (_.0) ((lambda (_.1) (cons _.1 '(love you))) 'I))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3) '(you)))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  (((lambda (_.0) (cons 'I (cons _.0 '(you)))) 'love)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1) (cons 'you '())))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  ((cons 'I ((lambda (_.0) (cons _.0 '(you))) 'love))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) _.1) '(love you)))
    (sym _.0 _.1))
  (((lambda (_.0) (cons 'I _.0)) (cons 'love '(you)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons 'love '(you)))
    (=/= ((_.0 quote))))
  (((lambda (_.0) ((lambda (_.1) _.0) (lambda (_.2) _.3)))
     '(I love you))
    (=/= ((_.0 _.1))) (sym _.0))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) '(love you)) '_.2)))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) (cons _.0 (cons 'love '(you)))) 'I)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) '(love you)) '_.2)) '_.3))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) (_.0 (lambda (_.1) _.2)))
     (lambda (_.3) '(I love you)))
    (=/= ((_.3 quote))) (sym _.0))
  (((lambda (_.0) (cons 'I (cons 'love '(you))))
     (lambda (_.1) _.2))
    (=/= ((_.0 cons)) ((_.0 quote))))
  (((lambda (_.0) (cons (_.0 '_.1) '(love you)))
     (lambda (_.2) 'I))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) _.2) 'love) '(you)))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  ((cons 'I
     ((lambda (_.0) (cons 'love '(you))) (lambda (_.1) _.2)))
    (=/= ((_.0 cons)) ((_.0 quote))))
  (((lambda (_.0) (cons ((lambda (_.1) _.1) 'I) '(love you)))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  (((lambda (_.0) (cons 'I ((lambda (_.1) _.1) '(love you))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.1) '(love you))) '_.2))
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  (((lambda (_.0) ((lambda (_.1) (cons _.1 _.0)) 'I))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons)))
    (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) '_.2))
     (cons '_.3 '_.4))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I '(love you))) '_.2))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons 'I ((lambda (_.0) '(love you)) (cons '_.1 '_.2)))
    (=/= ((_.0 quote)))
    (absento (closure _.1) (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love '(you))) '_.3))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  ((cons 'I
     (cons 'love ((lambda (_.0) '(you)) (lambda (_.1) _.2))))
    (=/= ((_.0 quote))))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2) (cons 'I '(love you))))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) '(love you)) (lambda (_.2) _.3)))
    (=/= ((_.1 quote))) (sym _.0))
  (((lambda (_.0) ((lambda (_.1) _.1) '(I love you)))
     (cons '_.2 '_.3))
    (=/= ((_.0 quote))) (sym _.1)
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) '(I love you))
     (cons (lambda (_.1) _.2) '_.3))
    (=/= ((_.0 quote))) (absento (closure _.3)))
  (((lambda (_.0) (cons ((lambda (_.1) _.1) 'I) _.0))
     '(love you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love (cons 'you '())))
    (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love ((lambda (_.2) '(you)) '_.3)))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  ((cons 'I ((lambda (_.0) _.0) (cons 'love '(you))))
    (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) '(I love you)) '_.3))
        '_.4))
     '_.5)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (absento (closure _.3) (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2) '(love you)))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) ((lambda (_.1) (cons 'I _.1)) '(love you)))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  ((cons 'I
     (cons 'love (cons 'you ((lambda (_.0) '()) '_.1))))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0) (cons 'I ((lambda (_.1) _.0) '_.2)))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) '(I love you)))
        '_.3))
     '_.4)
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.2)
    (absento (closure _.3) (closure _.4)))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love) (cons 'you '())))
    (sym _.0))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.0) '_.2)) '(love you)))
    (=/= ((_.0 _.1)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0) (cons (_.0 'I) '(love you)))
     (lambda (_.1) _.1))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) '(you)) '_.3)))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  (((lambda (_.0) (cons 'I '(love you)))
     (cons '_.1 (lambda (_.2) _.3)))
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) '(love you)) '_.4))
    (=/= ((_.0 quote)) ((_.3 quote)))
    (absento (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love _.2)) '(you)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.1 '(love you))) _.0))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  ((cons 'I
     (cons 'love (cons ((lambda (_.0) 'you) '_.1) '())))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     '(love you))
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  ((cons 'I
     (cons 'love (cons 'you ((lambda (_.0) _.0) '()))))
    (sym _.0))
  (((lambda (_.0) ((lambda (_.1) _.0) '_.2))
     (cons 'I '(love you)))
    (=/= ((_.0 _.1)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) 'love) '_.2) '(you)))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2))))
> (cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) 'love) '_.2) '(you)))
(I love you)
> ((lambda (_.0)
      ((lambda (_.1) (cons _.1 '(love you))) _.0))
     'I)
(I love you)
> (run 999 (q) (eval-expro q '() '(I love you)))
('(I love you) (cons 'I '(love you))
  (((lambda (_.0) '(I love you)) '_.1) (=/= ((_.0 quote)))
    (absento (closure _.1)))
  (((lambda (_.0) _.0) '(I love you)) (sym _.0))
  (((lambda (_.0) '(I love you)) (lambda (_.1) _.2))
    (=/= ((_.0 quote))))
  (cons 'I (cons 'love '(you)))
  ((cons ((lambda (_.0) 'I) '_.1) '(love you))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  ((cons ((lambda (_.0) _.0) 'I) '(love you)) (sym _.0))
  (((lambda (_.0) (cons 'I '(love you))) '_.1)
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.1)))
  ((cons 'I ((lambda (_.0) '(love you)) '_.1))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0) (cons 'I _.0)) '(love you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons 'I ((lambda (_.0) _.0) '(love you))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1) (cons 'love '(you)))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0) (cons _.0 '(love you))) 'I)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) '_.2)) '_.3)
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) (cons 'I '(love you))) (lambda (_.1) _.2))
    (=/= ((_.0 cons)) ((_.0 quote))))
  (((lambda (_.0) ((lambda (_.1) _.1) '(I love you))) '_.2)
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  (((lambda (_.0) '(I love you)) (cons '_.1 '_.2))
    (=/= ((_.0 quote)))
    (absento (closure _.1) (closure _.2)))
  ((cons 'I ((lambda (_.0) '(love you)) (lambda (_.1) _.2)))
    (=/= ((_.0 quote))))
  (cons 'I (cons 'love (cons 'you '())))
  (((lambda (_.0) _.0) (cons 'I '(love you))) (sym _.0))
  ((cons ((lambda (_.0) _.0) 'I) (cons 'love '(you)))
    (sym _.0))
  (((lambda (_.0) ((lambda (_.1) _.0) '_.2)) '(I love you))
    (=/= ((_.0 _.1)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) '(love you)) '_.3))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  ((cons 'I (cons ((lambda (_.0) 'love) '_.1) '(you)))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2)) '(love you))
    (=/= ((_.0 quote))))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) _.0)) '_.2)
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0) (_.0 '_.1)) (lambda (_.2) '(I love you)))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) _.2) '(love you)))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  (((lambda (_.0) ((lambda (_.1) _.1) _.0)) '(I love you))
    (sym _.0 _.1))
  ((cons 'I (cons ((lambda (_.0) _.0) 'love) '(you)))
    (sym _.0))
  (((lambda (_.0) (_.0 '(I love you))) (lambda (_.1) _.1))
    (=/= ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0) (cons 'I (cons 'love '(you)))) '_.1)
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.1)))
  ((cons 'I ((lambda (_.0) (cons 'love '(you))) '_.1))
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.1)))
  ((cons 'I (cons 'love ((lambda (_.0) '(you)) '_.1)))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1) '(I love you)) (lambda (_.2) _.3)))
     '_.4)
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.4)))
  (((lambda (_.0) ((lambda (_.1) _.0) _.0)) '(I love you))
    (=/= ((_.0 _.1))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) '(love you)) (lambda (_.3) _.4)))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love (cons 'you '())))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) '(love you)) '_.2))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2)))
  (((lambda (_.0) (cons 'I '(love you))) (cons '_.1 '_.2))
    (=/= ((_.0 cons)) ((_.0 quote)))
    (absento (closure _.1) (closure _.2)))
  (((lambda (_.0) '(I love you))
     (cons '_.1 (lambda (_.2) _.3)))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0) (cons 'I (cons 'love _.0))) '(you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  (((lambda (_.0) (_.0 _.0)) (lambda (_.1) '(I love you)))
    (=/= ((_.1 quote))) (sym _.0))
  ((cons 'I ((lambda (_.0) (cons 'love _.0)) '(you)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons 'I (cons 'love ((lambda (_.0) _.0) '(you))))
    (sym _.0))
  (((lambda (_.0) ((lambda (_.1) (cons _.1 '(love you))) 'I))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3) '(you)))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  (((lambda (_.0) (cons 'I (cons _.0 '(you)))) 'love)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1) (cons 'you '())))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  ((cons 'I ((lambda (_.0) (cons _.0 '(you))) 'love))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) _.1) '(love you)))
    (sym _.0 _.1))
  (((lambda (_.0) (cons 'I _.0)) (cons 'love '(you)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons 'love '(you)))
    (=/= ((_.0 quote))))
  (((lambda (_.0) ((lambda (_.1) _.0) (lambda (_.2) _.3)))
     '(I love you))
    (=/= ((_.0 _.1))) (sym _.0))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) '(love you)) '_.2)))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) (cons _.0 (cons 'love '(you)))) 'I)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) '(love you)) '_.2)) '_.3))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) (_.0 (lambda (_.1) _.2)))
     (lambda (_.3) '(I love you)))
    (=/= ((_.3 quote))) (sym _.0))
  (((lambda (_.0) (cons 'I (cons 'love '(you))))
     (lambda (_.1) _.2))
    (=/= ((_.0 cons)) ((_.0 quote))))
  (((lambda (_.0) (cons (_.0 '_.1) '(love you)))
     (lambda (_.2) 'I))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) _.2) 'love) '(you)))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  ((cons 'I
     ((lambda (_.0) (cons 'love '(you))) (lambda (_.1) _.2)))
    (=/= ((_.0 cons)) ((_.0 quote))))
  (((lambda (_.0) (cons ((lambda (_.1) _.1) 'I) '(love you)))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  (((lambda (_.0) (cons 'I ((lambda (_.1) _.1) '(love you))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.1) '(love you))) '_.2))
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  (((lambda (_.0) ((lambda (_.1) (cons _.1 _.0)) 'I))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons)))
    (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) '_.2))
     (cons '_.3 '_.4))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I '(love you))) '_.2))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons 'I ((lambda (_.0) '(love you)) (cons '_.1 '_.2)))
    (=/= ((_.0 quote)))
    (absento (closure _.1) (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love '(you))) '_.3))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  ((cons 'I
     (cons 'love ((lambda (_.0) '(you)) (lambda (_.1) _.2))))
    (=/= ((_.0 quote))))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2) (cons 'I '(love you))))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) '(love you)) (lambda (_.2) _.3)))
    (=/= ((_.1 quote))) (sym _.0))
  (((lambda (_.0) ((lambda (_.1) _.1) '(I love you)))
     (cons '_.2 '_.3))
    (=/= ((_.0 quote))) (sym _.1)
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) '(I love you))
     (cons (lambda (_.1) _.2) '_.3))
    (=/= ((_.0 quote))) (absento (closure _.3)))
  (((lambda (_.0) (cons ((lambda (_.1) _.1) 'I) _.0))
     '(love you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love (cons 'you '())))
    (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love ((lambda (_.2) '(you)) '_.3)))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  ((cons 'I ((lambda (_.0) _.0) (cons 'love '(you))))
    (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) '(I love you)) '_.3))
        '_.4))
     '_.5)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (absento (closure _.3) (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2) '(love you)))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) ((lambda (_.1) (cons 'I _.1)) '(love you)))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  ((cons 'I
     (cons 'love (cons 'you ((lambda (_.0) '()) '_.1))))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0) (cons 'I ((lambda (_.1) _.0) '_.2)))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) '(I love you)))
        '_.3))
     '_.4)
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.2)
    (absento (closure _.3) (closure _.4)))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love) (cons 'you '())))
    (sym _.0))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.0) '_.2)) '(love you)))
    (=/= ((_.0 _.1)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0) (cons (_.0 'I) '(love you)))
     (lambda (_.1) _.1))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) '(you)) '_.3)))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  (((lambda (_.0) (cons 'I '(love you)))
     (cons '_.1 (lambda (_.2) _.3)))
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) '(love you)) '_.4))
    (=/= ((_.0 quote)) ((_.3 quote)))
    (absento (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love _.2)) '(you)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.1 '(love you))) _.0))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  ((cons 'I
     (cons 'love (cons ((lambda (_.0) 'you) '_.1) '())))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     '(love you))
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  ((cons 'I
     (cons 'love (cons 'you ((lambda (_.0) _.0) '()))))
    (sym _.0))
  (((lambda (_.0) ((lambda (_.1) _.0) '_.2))
     (cons 'I '(love you)))
    (=/= ((_.0 _.1)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) 'love) '_.2) '(you)))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2)))
  (((lambda (_.0) (_.0 '(love you)))
     (lambda (_.1) (cons 'I _.1)))
    (=/= ((_.0 quote)) ((_.1 cons)) ((_.1 quote)))
    (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) 'love) (lambda (_.1) _.2)) '(you)))
    (=/= ((_.0 quote))))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love ((lambda (_.2) _.2) '(you))))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  (((lambda (_.0) (cons 'I ((lambda (_.1) '(love you)) _.0)))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) '(love you)) _.0)) '_.2))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0) (cons 'I (_.0 '_.1)))
     (lambda (_.2) '(love you)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  ((cons 'I
     ((lambda (_.0) (_.0 '_.1)) (lambda (_.2) '(love you))))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  (((lambda (_.0) (cons ((lambda (_.1) 'I) '_.2) _.0))
     '(love you))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3) (cons 'you '())))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) '_.3))
        '(I love you)))
     '_.4)
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 quote))) (sym _.1)
    (absento (closure _.3) (closure _.4)))
  (((lambda (_.0) '(I love you)) ((lambda (_.1) '_.2) '_.3))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons ((lambda (_.0) ((lambda (_.1) 'I) '_.2)) '_.3)
     '(love you))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons _.2 '(you))) 'love))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1)))
  (((lambda (_.0) (_.0 'I))
     (lambda (_.1) (cons _.1 '(love you))))
    (=/= ((_.0 quote)) ((_.1 cons)) ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) _.0))
     (cons '_.2 '_.3))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) _.2) '(you))))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) _.3) '(love you)))
    (=/= ((_.0 quote))) (sym _.3))
  (((lambda (_.0)
      (cons _.0 ((lambda (_.1) '(love you)) '_.2)))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0) (cons 'I ((lambda (_.1) _.1) _.0)))
     '(love you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.1) _.0)) '(love you)))
    (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) (cons 'I _.0)) '_.2))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2)))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) '_.2))
     (lambda (_.3) _.4))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) '(I love you)) _.1))
        '_.3))
     '_.4)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.1) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) '_.3)) '_.4))
     '(I love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 quote)) ((_.1 quote)))
    (sym _.0) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0) (cons 'I (_.0 '(love you))))
     (lambda (_.1) _.1))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     (cons 'love (cons ((lambda (_.0) _.0) 'you) '())))
    (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) '(love you)) '_.4)) '_.5))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (absento (closure _.1) (closure _.4) (closure _.5)))
  (((lambda (_.0) ((lambda (_.1) _.1) _.0))
     (cons 'I '(love you)))
    (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0) (_.0 '(love you))) (lambda (_.1) _.1)))
    (=/= ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0) _.0) ((lambda (_.1) '(I love you)) '_.2))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) _.1) 'love) '(you)))
    (sym _.0 _.1))
  (((lambda (_.0) (cons 'I (cons 'love (cons 'you '()))))
     '_.1)
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2) ((lambda (_.3) '(I love you)) '_.4)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.0) (absento (closure _.1) (closure _.4)))
  ((cons 'I
     ((lambda (_.0) (cons 'love (cons 'you '()))) '_.1))
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0)
      (cons _.0 ((lambda (_.1) _.1) '(love you))))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.0 '(love you))) '_.2))
     'I)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) _.1)) '(I love you)))
     '_.3)
    (=/= ((_.0 quote))) (sym _.1 _.2)
    (absento (closure _.3)))
  ((cons 'I
     (cons 'love ((lambda (_.0) (cons 'you '())) '_.1)))
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0) ((lambda (_.1) (cons 'I '(love you))) _.0))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love '(you))) (lambda (_.3) _.4)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (absento (closure _.1)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) (cons 'love '(you))) '_.2))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0) (cons 'I (cons 'love '(you))))
     (cons '_.1 '_.2))
    (=/= ((_.0 cons)) ((_.0 quote)))
    (absento (closure _.1) (closure _.2)))
  (((lambda (_.0) (_.0 _.0))
     (lambda (_.1) (cons 'I '(love you))))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) _.3) '(love you))) '_.4))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.3)
    (absento (closure _.1) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) '(love you)) (cons '_.3 '_.4)))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3) (closure _.4)))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) '_.2))
     (cons '_.3 (lambda (_.4) _.5)))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2) ((lambda (_.3) _.3) '(I love you))))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.0 _.3)
    (absento (closure _.1)))
  (((lambda (_.0) (cons 'I (cons 'love (cons 'you _.0))))
     '())
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons 'I
     ((lambda (_.0) (cons 'love (cons 'you _.0))) '()))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     (cons 'love '(you)))
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love ((lambda (_.2) '(you)) (lambda (_.3) _.4))))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) '(love you)) (lambda (_.2) _.3))))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.4)))
  (((lambda (_.0) (cons ((lambda (_.1) _.1) 'I) '(love you)))
     (cons '_.2 '_.3))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     (cons 'love ((lambda (_.0) (cons 'you _.0)) '())))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.0) '_.2) '(love you)))
     'I)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) '(love you)) (lambda (_.2) _.3)))
       '_.4))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.4)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love ((lambda (_.1) '(you)) '_.2)))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2)))
  (((lambda (_.0) (cons 'I ((lambda (_.1) _.0) _.0)))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0))
  (((lambda (_.0) ((lambda (_.1) _.1) '(I love you)))
     (lambda (_.2) _.3))
    (=/= ((_.0 quote))) (sym _.1))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.0) _.0)) '(love you)))
    (=/= ((_.0 _.1))) (sym _.0))
  ((cons 'I
     (cons 'love
       (cons 'you ((lambda (_.0) '()) (lambda (_.1) _.2)))))
    (=/= ((_.0 quote))))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) '(you)) (lambda (_.3) _.4))))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1)))
  (((lambda (_.0) ((lambda (_.1) _.1) '(I love you)))
     (cons '_.2 (lambda (_.3) _.4)))
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) '(I love you)) '_.3))
        _.0))
     '_.4)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0) (absento (closure _.3) (closure _.4)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) '(love you)) (lambda (_.4) _.5)))
    (=/= ((_.0 quote)) ((_.3 quote))))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.0 _.1)) '(love you)))
     'I)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons)))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) '(I love you)) (lambda (_.2) _.3)))
     (cons '_.4 '_.5))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.4) (closure _.5)))
  (((lambda (_.0) (cons (_.0 '_.1) (cons 'love '(you))))
     (lambda (_.2) 'I))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  (((lambda (_.0) ((lambda (_.1) _.0) _.0))
     (cons 'I '(love you)))
    (=/= ((_.0 _.1))) (sym _.0))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I) (cons 'love '(you))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love)
       ((lambda (_.1) '(you)) '_.2)))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons 'love (cons 'you '())))
    (=/= ((_.0 quote))))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) _.2) (cons 'love '(you))))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  (((lambda (_.0) ((lambda (_.1) (cons 'I _.1)) _.0))
     '(love you))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0) (cons 'love '(you))) (cons '_.1 '_.2)))
    (=/= ((_.0 cons)) ((_.0 quote)))
    (absento (closure _.1) (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) '(I love you))) _.0))
     '_.3)
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0 _.2)
    (absento (closure _.3)))
  ((cons 'I
     ((lambda (_.0) '(love you))
       (cons '_.1 (lambda (_.2) _.3))))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) _.1)) '(I love you)))
     '_.3)
    (=/= ((_.0 quote)) ((_.1 _.2))) (sym _.1)
    (absento (closure _.3)))
  (((lambda (_.0) (cons 'I (_.0 _.0)))
     (lambda (_.1) '(love you)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0))
  (((lambda (_.0) (cons 'I '(love you)))
     (cons (lambda (_.1) _.2) '_.3))
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.3)))
  ((cons 'I
     ((lambda (_.0) (_.0 _.0)) (lambda (_.1) '(love you))))
    (=/= ((_.1 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love (cons 'you ((lambda (_.2) '()) '_.3))))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  (((lambda (_.0) (cons ((lambda (_.1) _.1) 'I) _.0))
     (cons 'love '(you)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I '(love you)))
        (lambda (_.2) _.3)))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (absento (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) _.2) 'love) (cons 'you '())))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) '(love you)))
    (=/= ((_.0 quote)) ((_.2 _.3)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1) (closure _.4)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) (cons 'love _.1)) '(you)))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0 _.1))
  (((lambda (_.0) (cons 'I (cons 'love _.0)))
     (cons 'you '()))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3)
       ((lambda (_.4) '(you)) '_.5)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 quote)))
    (absento (closure _.1) (closure _.3) (closure _.5)))
  (((lambda (_.0) (_.0 '(I love you)))
     (lambda (_.1) ((lambda (_.2) _.1) '_.3)))
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons 'you ((lambda (_.2) '()) '_.3))))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2) '(love you)))
     (cons '_.3 '_.4))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.1 (cons 'love '(you)))) 'I))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) '(I love you)) (lambda (_.3) _.4)))
        '_.5))
     '_.6)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (absento (closure _.5) (closure _.6)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love (cons ((lambda (_.2) 'you) '_.3) '())))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love (cons 'you ((lambda (_.2) _.2) '()))))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) (cons _.1 '(you))) 'love)))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) (cons _.1 '(you))) 'love))
       '_.2))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  (((lambda (_.0)
      (cons _.0 ((lambda (_.1) '(love you)) _.0)))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love ((lambda (_.1) _.1) '(you))))
    (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons ((lambda (_.2) 'you) '_.3) '())))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  (((lambda (_.0) (cons 'I (cons 'love (cons _.0 '()))))
     'you)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons ((lambda (_.3) 'love) '_.4) '(you)))
    (=/= ((_.0 quote)) ((_.3 quote)))
    (absento (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) (lambda (_.3) _.4)) '(you)))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1)))
  ((cons 'I
     ((lambda (_.0) (cons 'love (cons _.0 '()))) 'you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  (((lambda (_.0) ((lambda (_.1) (cons _.1 '(love you))) 'I))
     (cons '_.2 '_.3))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2) (closure _.3)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons 'you ((lambda (_.2) _.2) '()))))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  ((cons 'I
     (cons 'love ((lambda (_.0) (cons _.0 '())) 'you)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) '_.3)) _.0))
     '(I love you))
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I) (cons 'love _.0)))
     '(you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love)
       ((lambda (_.1) _.1) '(you))))
    (sym _.0 _.1))
  ((cons ((lambda (_.0) ((lambda (_.1) _.0) '_.2)) 'I)
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) 'love) '_.2) (cons 'you '())))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) _.1)) '_.3))
     '(I love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) '(love you)) _.2)) '_.4))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.2) (absento (closure _.1) (closure _.4)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) (cons _.1 '(you))) 'love))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0) (cons 'love _.0)) (cons 'you '())))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons 'I
     (cons ((lambda (_.0) 'love) (lambda (_.1) _.2))
       (cons 'you '())))
    (=/= ((_.0 quote))))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2) ((lambda (_.3) '(I love you)) _.2)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.0 _.2) (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (_.2 '_.3)) (lambda (_.4) '(love you))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 quote)))
    (sym _.2) (absento (closure _.1) (closure _.3)))
  ((cons ((lambda (_.0) ((lambda (_.1) 'I) '_.2)) '_.3)
     (cons 'love '(you)))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1) '(I love you)) (cons '_.2 '_.3)))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     ((lambda (_.3) '(love you)) '_.4))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.1)
    (absento (closure _.2) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3)
       ((lambda (_.4) _.4) '(you))))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.4)
    (absento (closure _.1) (closure _.3)))
  ((cons 'I
     (cons 'love
       (cons ((lambda (_.0) 'you) '_.1)
         ((lambda (_.2) '()) '_.3))))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) _.0))
     (cons '_.2 (lambda (_.3) _.4)))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0) (cons ((lambda (_.1) 'I) '_.2) _.0))
     (cons 'love '(you)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) _.0) (lambda (_.2) _.3))))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.0) (lambda (_.2) _.3)))
       '(love you)))
    (=/= ((_.0 _.1))) (sym _.0))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I) (cons _.0 '(you))))
     'love)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0) (cons (_.0 _.0) '(love you)))
     (lambda (_.1) 'I))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0))
  (((lambda (_.0) ((lambda (_.1) _.1) (cons 'I '(love you))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) _.3) _.2)) '(love you)))
    (=/= ((_.0 quote))) (sym _.2 _.3)
    (absento (closure _.1)))
  (((lambda (_.0)
      (cons 'I (cons 'love ((lambda (_.1) '(you)) '_.2))))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) ((lambda (_.1) (cons 'I _.0)) _.0))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0))
  ((cons 'I
     ((lambda (_.0)
        (cons 'love ((lambda (_.1) '(you)) '_.2)))
       '_.3))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) '(I love you)) _.1)) _.0))
     '_.3)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  (((lambda (_.0) ((lambda (_.1) _.0) (lambda (_.2) _.3)))
     (cons 'I '(love you)))
    (=/= ((_.0 _.1))) (sym _.0))
  (((lambda (_.0) (_.0 '(I love you)))
     (lambda (_.1) ((lambda (_.2) _.2) _.1)))
    (=/= ((_.0 quote))) (sym _.0 _.1 _.2))
  (((lambda (_.0) (cons 'I (cons _.0 (cons 'you '()))))
     'love)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) '_.3)) _.0))
     '(I love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 quote)) ((_.1 quote)))
    (sym _.0) (absento (closure _.3)))
  ((cons 'I
     ((lambda (_.0) (cons _.0 (cons 'you '()))) 'love))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) (cons _.2 '(love you))) 'I))
        '_.3))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.2) (absento (closure _.3) (closure _.4)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) ((lambda (_.1) '(you)) '_.2)) '_.3)))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     (cons 'love
       (cons ((lambda (_.0) 'you) '_.1)
         ((lambda (_.2) _.2) '()))))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) ((lambda (_.2) '(love you)) '_.3)) '_.4))
    (=/= ((_.1 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) '(love you)) '_.2)))
     (cons '_.3 '_.4))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)))
  (((lambda (_.0) (cons 'I (_.0 (lambda (_.1) _.2))))
     (lambda (_.3) '(love you)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.3 quote))) (sym _.0))
  ((cons 'I
     ((lambda (_.0) (_.0 (lambda (_.1) _.2)))
       (lambda (_.3) '(love you))))
    (=/= ((_.3 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love (cons ((lambda (_.2) _.2) 'you) '())))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  (((lambda (_.0) (cons _.0 (cons 'love (cons 'you '()))))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.0 '(love you))) _.0))
     'I)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0))
  (((lambda (_.0) (_.0 (lambda (_.1) _.2)))
     (lambda (_.3) (cons 'I '(love you))))
    (=/= ((_.3 cons)) ((_.3 quote))) (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) (lambda (_.3) _.4)))
        '(I love you)))
     '_.5)
    (=/= ((_.0 quote)) ((_.1 _.2))) (sym _.1)
    (absento (closure _.5)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (_.2 '(love you))) (lambda (_.3) _.3)))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.2 _.3)
    (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I _.0)) (lambda (_.2) _.3)))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0))
  (((lambda (_.0) (cons 'I (cons 'love (cons 'you '()))))
     (lambda (_.1) _.2))
    (=/= ((_.0 cons)) ((_.0 quote))))
  ((cons 'I
     ((lambda (_.0) (cons 'love (cons 'you '())))
       (lambda (_.1) _.2)))
    (=/= ((_.0 cons)) ((_.0 quote))))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) _.1)) _.0))
     '(I love you))
    (sym _.0 _.1 _.2))
  (((lambda (_.0) (cons 'I (cons (_.0 '_.1) '(you))))
     (lambda (_.2) 'love))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love (cons 'you '()))) '_.3))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  ((cons 'I
     ((lambda (_.0) (cons (_.0 '_.1) '(you)))
       (lambda (_.2) 'love)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons ((lambda (_.2) _.2) 'you) '())))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) (cons 'you '())) (lambda (_.1) _.2))))
    (=/= ((_.0 cons)) ((_.0 quote))))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons ((lambda (_.3) _.3) 'love) '(you)))
    (=/= ((_.0 quote))) (sym _.3))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.1 (cons 'love _.0))) 'I))
     '(you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons 'I (cons ((lambda (_.1) _.1) 'love) '(you))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2) (cons 'I (cons 'love '(you)))))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  ((cons 'I
     ((lambda (_.0) (cons ((lambda (_.1) _.1) 'love) '(you)))
       '_.2))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     ((lambda (_.3) _.3) '(love you)))
    (=/= ((_.0 quote))) (sym _.1 _.3)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) (cons 'love '(you))) (lambda (_.2) _.3)))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0))
  (((lambda (_.0)
      (cons 'I (cons 'love ((lambda (_.1) _.1) '(you)))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) (cons 'love ((lambda (_.1) _.1) '(you))))
       '_.2))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love ((lambda (_.2) (cons 'you '())) '_.3)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 '_.2))
        (lambda (_.3) '(I love you))))
     '_.4)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.3 quote)))
    (sym _.1) (absento (closure _.2) (closure _.4)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        ((lambda (_.2) '(love you)) '_.3)))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.1)
    (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) (cons _.1 _.0)) 'love)))
     '(you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons)))
    (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) _.0) (cons '_.2 '_.3)))
     '(I love you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) ((lambda (_.1) _.1) '(you))) '_.2)))
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) (cons _.1 _.0)) 'love))
       '(you)))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2) (cons 'love '(you))))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) '(love you)) '_.2))
       (cons '_.3 '_.4)))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) (cons 'love '(you))) '_.2)))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) ((lambda (_.2) _.2) '(love you))) '_.3))
    (=/= ((_.1 quote))) (sym _.0 _.2)
    (absento (closure _.3)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) (cons 'love '(you))) '_.2))
       '_.3))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) (cons 'I ((lambda (_.1) _.1) '(love you))))
     (cons '_.2 '_.3))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     (cons 'love ((lambda (_.0) '(you)) (cons '_.1 '_.2))))
    (=/= ((_.0 quote)))
    (absento (closure _.1) (closure _.2)))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) '_.2))
     (cons (lambda (_.3) _.4) '_.5))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.5)))
  (((lambda (_.0) (cons (_.0 'I) (cons 'love '(you))))
     (lambda (_.1) _.1))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) (cons 'you '())) '_.3)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) '(love you)) (cons '_.2 '_.3)))
    (=/= ((_.1 quote))) (sym _.0)
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0 (cons ((lambda (_.1) _.1) 'love) '(you))))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0) (cons 'I (cons 'love '(you))))
     (cons '_.1 (lambda (_.2) _.3)))
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) (cons 'love '(you))) '_.4))
    (=/= ((_.0 quote)) ((_.3 cons)) ((_.3 quote)))
    (absento (closure _.4)))
  (((lambda (_.0) ((lambda (_.1) (cons _.1 _.0)) 'I))
     (cons 'love '(you)))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons)))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.0 '(love you)))
        (lambda (_.2) _.3)))
     'I)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0) ((lambda (_.1) _.1) '())) '_.2))))
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I '(love you))) '_.2))
     (cons '_.3 '_.4))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0) ((lambda (_.1) '()) '_.2)) '_.3))))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love ((lambda (_.1) '(you)) (lambda (_.2) _.3))))
    (=/= ((_.1 quote))) (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.1 (cons _.0 '(you)))) 'I))
     'love)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0) (cons 'I (_.0 '_.1)))
     (lambda (_.2) (cons 'love '(you))))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 cons))
      ((_.2 quote)))
    (sym _.0) (absento (closure _.1)))
  ((cons 'I
     ((lambda (_.0) (_.0 '_.1))
       (lambda (_.2) (cons 'love '(you)))))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  (((lambda (_.0) (cons 'I '(love you)))
     ((lambda (_.1) '_.2) '_.3))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        ((lambda (_.1) '(love you)) (lambda (_.2) _.3))))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love (cons 'you _.2))) '()))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1)))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love)
       ((lambda (_.1) '(you)) (lambda (_.2) _.3))))
    (=/= ((_.1 quote))) (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 '(I love you))) (lambda (_.2) _.2)))
     '_.3)
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.1 _.2)
    (absento (closure _.3)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        ((lambda (_.2) _.2) '(love you))))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1 _.2)
    (absento (closure _.3)))
  (((lambda (_.0) '(I love you)) ((lambda (_.1) _.1) '_.2))
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.1) '(love you)))
       (cons '_.2 '_.3)))
    (=/= ((_.0 quote))) (sym _.1)
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     ((lambda (_.0) '(love you))
       (cons (lambda (_.1) _.2) '_.3)))
    (=/= ((_.0 quote))) (absento (closure _.3)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love ((lambda (_.2) (cons 'you _.2)) '())))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1)))
  (((lambda (_.0)
      (cons 'I (cons ((lambda (_.1) _.1) 'love) _.0)))
     '(you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2)
        ((lambda (_.3) '(love you)) (lambda (_.4) _.5)))
       '_.6))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (absento (closure _.1) (closure _.6)))
  ((cons 'I
     ((lambda (_.0) (cons ((lambda (_.1) _.1) 'love) _.0))
       '(you)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) _.1) '(I love you)))
     (cons (lambda (_.2) _.3) '_.4))
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) (cons _.2 _.1)) 'I))
        '(love you)))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 _.2)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)))
    (sym _.1 _.2) (absento (closure _.3)))
  (((lambda (_.0) (cons ((lambda (_.1) _.1) 'I) '(love you)))
     (cons '_.2 (lambda (_.3) _.4)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) _.2) _.2)) '(love you)))
    (=/= ((_.0 quote)) ((_.2 _.3))) (sym _.2)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       (cons 'you ((lambda (_.2) '()) (lambda (_.3) _.4)))))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1)))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2)
       ((lambda (_.3) '(I love you)) (lambda (_.4) _.5))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.0) (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons _.1 ((lambda (_.2) '(love you)) '_.3)))
        'I))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.1) (absento (closure _.3) (closure _.4)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons 'love ((lambda (_.3) '(you)) '_.4)))
    (=/= ((_.0 quote)) ((_.3 quote)))
    (absento (closure _.4)))
  (((lambda (_.0) (_.0 '(I love you)))
     (lambda (_.1) ((lambda (_.2) _.1) _.1)))
    (=/= ((_.0 quote)) ((_.1 _.2))) (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) (cons 'you _.2)) '())))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3)
       ((lambda (_.4) '(you)) (lambda (_.5) _.6))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 quote)))
    (absento (closure _.1) (closure _.3)))
  ((cons 'I
     (cons 'love ((lambda (_.0) _.0) (cons 'you '()))))
    (sym _.0))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons 'you ((lambda (_.2) '()) (lambda (_.3) _.4)))))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) _.1) (cons 'love '(you))))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) ((lambda (_.2) '(love you)) '_.3))
          '_.4)))
     '_.5)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))
      ((_.2 quote)))
    (absento (closure _.3) (closure _.4) (closure _.5)))
  (((lambda (_.0)
      ((lambda (_.1) '(I love you)) (lambda (_.2) _.3)))
     (cons '_.4 (lambda (_.5) _.6)))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.4)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) ((lambda (_.2) '(love you)) '_.3))
          '_.4))
       '_.5))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (absento (closure _.3) (closure _.4) (closure _.5)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) _.2) 'love)
       ((lambda (_.3) '(you)) '_.4)))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.2)
    (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) (lambda (_.3) _.4)))
        '_.5))
     '(I love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 quote))) (sym _.0)
    (absento (closure _.5)))
  (((lambda (_.0)
      (cons 'I (cons ((lambda (_.1) 'love) '_.2) '(you))))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     ((lambda (_.0)
        (cons ((lambda (_.1) 'love) '_.2) '(you)))
       '_.3))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons _.1 ((lambda (_.2) _.2) '(love you))))
        'I))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1 _.2) (absento (closure _.3)))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0) ((lambda (_.1) _.0) '_.2)) '()))))
    (=/= ((_.0 _.1)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) _.1)) _.0))
     '(I love you))
    (=/= ((_.1 _.2))) (sym _.0 _.1))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love '(you))) (cons '_.3 '_.4)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I (cons _.1 '(you)))) 'love))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) '(I love you)) '_.3))
        '_.4))
     (cons '_.5 '_.6))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (absento (closure _.3) (closure _.4) (closure _.5)
      (closure _.6)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) (cons 'love _.1)) '(you))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) (cons 'love _.1)) '(you)))
       '_.2))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) '(love you))
       (cons '_.3 (lambda (_.4) _.5))))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  (((lambda (_.0)
      (cons 'I (cons 'love ((lambda (_.1) _.0) '_.2))))
     '(you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love (cons 'you ((lambda (_.1) '()) '_.2))))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I) (cons 'love '(you))))
     (cons '_.2 '_.3))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     ((lambda (_.0) (cons 'love ((lambda (_.1) _.0) '_.2)))
       '(you)))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) ((lambda (_.2) _.2) '(love you)))
          '_.3)))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.2)
    (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons _.0 (cons ((lambda (_.1) 'love) '_.2) '(you))))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) ((lambda (_.2) _.2) '(love you)))
          '_.3))
       '_.4))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.2)
    (absento (closure _.3) (closure _.4)))
  (((lambda (_.0) ((lambda (_.1) (cons 'I _.1)) '(love you)))
     (cons '_.2 '_.3))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) _.0) ((lambda (_.1) _.1) '(I love you)))
    (sym _.0 _.1))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) ((lambda (_.1) _.0) '_.2)) '(you))))
    (=/= ((_.0 _.1)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) _.1) 'love) (cons 'you '())))
    (sym _.0 _.1))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (_.2 _.2)) (lambda (_.3) '(love you))))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.2)
    (absento (closure _.1)))
  (((lambda (_.0) (cons 'I (cons (_.0 'love) '(you))))
     (lambda (_.1) _.1))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) ((lambda (_.2) _.1) '_.3)) '(love you)))
    (=/= ((_.1 _.2)) ((_.1 quote))) (sym _.0 _.1)
    (absento (closure _.3)))
  ((cons 'I
     ((lambda (_.0) (cons (_.0 'love) '(you)))
       (lambda (_.1) _.1)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0) (cons 'I ((lambda (_.1) _.0) '_.2)))
     (cons 'love '(you)))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0) (_.0 '(you)))
     (lambda (_.1) (cons 'I (cons 'love _.1))))
    (=/= ((_.0 quote)) ((_.1 cons)) ((_.1 quote)))
    (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love)
       (cons 'you ((lambda (_.1) '()) '_.2))))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) '(I love you)))
        '_.3))
     (cons '_.4 '_.5))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.2)
    (absento (closure _.3) (closure _.4) (closure _.5)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) 'love) '_.2)
       ((lambda (_.3) '(you)) '_.4)))
    (=/= ((_.1 quote)) ((_.3 quote))) (sym _.0)
    (absento (closure _.2) (closure _.4)))
  ((cons 'I
     ((lambda (_.0) (cons 'love '(you)))
       (cons '_.1 (lambda (_.2) _.3))))
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.1)))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2) (cons 'love _.0)))
     '(you))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) (lambda (_.1) _.2))
       ((lambda (_.3) '(you)) '_.4)))
    (=/= ((_.0 quote)) ((_.3 quote)))
    (absento (closure _.4)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     ((lambda (_.3) '(love you)) (lambda (_.4) _.5)))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.1)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.1 (cons 'love '(you)))) _.0))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  ((cons 'I
     (cons 'love
       (cons ((lambda (_.0) 'you) '_.1)
         ((lambda (_.2) '()) (lambda (_.3) _.4)))))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) (cons _.1 '(you))) _.0)))
     'love)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) (cons _.1 '(you))) _.0))
       'love))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) '(I love you)) (lambda (_.3) _.4)))
        _.0))
     '_.5)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0) (absento (closure _.5)))
  ((cons ((lambda (_.0) ((lambda (_.1) 'I) '_.2)) '_.3)
     ((lambda (_.4) '(love you)) '_.5))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.4 quote)))
    (absento (closure _.2) (closure _.3) (closure _.5)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) (cons 'love _.3)) '(you)))
    (=/= ((_.0 quote)) ((_.3 cons)) ((_.3 quote))) (sym _.3))
  ((cons 'I
     (cons ((lambda (_.0) ((lambda (_.1) _.1) 'love)) '_.2)
       '(you)))
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     (cons 'love (cons 'you '())))
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3)
       (cons 'you ((lambda (_.4) '()) '_.5))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 quote)))
    (absento (closure _.1) (closure _.3) (closure _.5)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love (cons ((lambda (_.1) 'you) '_.2) '())))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2)))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) _.0))
     (lambda (_.2) _.3))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) (cons 'I '(love you))) '_.3))
        '_.4))
     '_.5)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (absento (closure _.3) (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2) '(love you)))
     (cons '_.3 (lambda (_.4) _.5)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 '_.2)) (lambda (_.3) _.0)))
     '(I love you))
    (=/= ((_.0 _.3)) ((_.0 quote)) ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.2)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        ((lambda (_.2) _.0) '_.3)))
     '(love you))
    (=/= ((_.0 _.2)) ((_.0 cons)) ((_.0 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  (((lambda (_.0)
      (cons _.0 ((lambda (_.1) (cons _.1 '(you))) 'love)))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.0) '_.2))
       (cons 'love '(you))))
    (=/= ((_.0 _.1)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love (cons 'you ((lambda (_.1) _.1) '()))))
    (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love)
       (cons ((lambda (_.1) 'you) '_.2) '())))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2)))
  (((lambda (_.0) (cons 'I (_.0 '(you))))
     (lambda (_.1) (cons 'love _.1)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) (cons 'I '(love you))) _.0))
     (cons '_.2 '_.3))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2) (closure _.3)))
  ((cons 'I
     ((lambda (_.0) (_.0 '(you)))
       (lambda (_.1) (cons 'love _.1))))
    (=/= ((_.0 quote)) ((_.1 cons)) ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0) (cons 'I _.0))
     ((lambda (_.1) '(love you)) '_.2))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) (cons _.2 _.0)) 'I))
        '_.3))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 cons)) ((_.0 quote))
      ((_.1 cons)) ((_.1 quote)) ((_.2 cons)))
    (sym _.0 _.2) (absento (closure _.3)))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love)
       (cons 'you ((lambda (_.1) _.1) '()))))
    (sym _.0 _.1))
  ((cons 'I
     (cons 'love
       (cons ((lambda (_.0) _.0) 'you)
         ((lambda (_.1) '()) '_.2))))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) (cons _.3 '(you))) 'love))
       '_.4))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 cons)) ((_.3 quote)))
    (sym _.3) (absento (closure _.1) (closure _.4)))
  ((cons 'I
     (cons 'love
       (cons ((lambda (_.0) 'you) (lambda (_.1) _.2)) '())))
    (=/= ((_.0 quote))))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2)
       ((lambda (_.3) (cons _.3 '(love you))) 'I)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 cons)) ((_.3 quote)))
    (sym _.0 _.3) (absento (closure _.1)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) 'love) (lambda (_.2) _.3)) '(you)))
    (=/= ((_.1 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3)
       (cons ((lambda (_.4) 'you) '_.5) '())))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 quote)))
    (absento (closure _.1) (closure _.3) (closure _.5)))
  (((lambda (_.0)
      (cons 'I (cons 'love ((lambda (_.1) '(you)) _.0))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons 'love ((lambda (_.3) _.3) '(you))))
    (=/= ((_.0 quote))) (sym _.3))
  ((cons 'I
     ((lambda (_.0) (cons 'love ((lambda (_.1) '(you)) _.0)))
       '_.2))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love (cons _.2 '()))) 'you))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) _.3) '(I love you)))
           '_.4))
        '_.5))
     '_.6)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.3)
    (absento (closure _.4) (closure _.5) (closure _.6)))
  (((lambda (_.0) (cons (_.0 'I) (_.0 '(love you))))
     (lambda (_.1) _.1))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) ((lambda (_.1) '(you)) _.0)) '_.2)))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0) (cons 'I (cons 'love (_.0 '_.1))))
     (lambda (_.2) '(you)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  (((lambda (_.0) (_.0 'love))
     (lambda (_.1) (cons 'I (cons _.1 '(you)))))
    (=/= ((_.0 quote)) ((_.1 cons)) ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) _.1)) _.0))
     '(I love you))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0 _.1))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3)
       (cons 'you ((lambda (_.4) _.4) '()))))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.4)
    (absento (closure _.1) (closure _.3)))
  ((cons 'I
     ((lambda (_.0) (cons 'love (_.0 '_.1)))
       (lambda (_.2) '(you))))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  (((lambda (_.0) ((lambda (_.1) (cons _.1 '(love you))) 'I))
     (cons '_.2 (lambda (_.3) _.4)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) ((lambda (_.2) '(love you)) _.1)) '_.3))
    (=/= ((_.1 quote)) ((_.2 quote))) (sym _.0 _.1)
    (absento (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 _.1)) (lambda (_.2) '(I love you))))
     '_.3)
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.1)
    (absento (closure _.3)))
  (((lambda (_.0) (cons 'I ((lambda (_.1) '(love you)) _.0)))
     (cons '_.2 '_.3))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) '(I love you)) '_.4))
           '_.5))
        '_.6))
     '_.7)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote))
      ((_.3 quote)))
    (absento (closure _.4) (closure _.5) (closure _.6)
      (closure _.7)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) '(I love you)) _.0))
        '_.3))
     '_.4)
    (=/= ((_.0 _.1)) ((_.0 quote)) ((_.1 quote))
      ((_.2 quote)))
    (sym _.0) (absento (closure _.3) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love ((lambda (_.2) (cons _.2 '())) 'you)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) (cons 'I _.2)) '(love you)))
        '_.3))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.2) (absento (closure _.3) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) _.2) 'love)
       ((lambda (_.3) _.3) '(you))))
    (=/= ((_.0 quote))) (sym _.2 _.3)
    (absento (closure _.1)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) (_.0 '_.1)) (lambda (_.2) '(you)))))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  (((lambda (_.0)
      (cons 'I (cons ((lambda (_.1) 'love) '_.2) _.0)))
     '(you))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2) (cons _.0 '(you))))
     'love)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) (cons ((lambda (_.1) 'love) '_.2) _.0))
       '(you)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) (_.1 '_.2)) (lambda (_.3) '(love you))))
    (=/= ((_.1 quote)) ((_.3 quote))) (sym _.0 _.1)
    (absento (closure _.2)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) ((lambda (_.2) _.1) '_.3))
          '(love you))))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 _.2))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.3) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love _.2)) (cons 'you '())))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) ((lambda (_.2) _.1) '_.3))
          '(love you)))
       '_.4))
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 quote))) (sym _.1)
    (absento (closure _.3) (closure _.4)))
  ((cons 'I
     ((lambda (_.0) '(love you)) ((lambda (_.1) '_.2) '_.3)))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) _.0) '(love you)))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) ((lambda (_.1) 'love) '_.2)) '_.3)
       '(you)))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons ((lambda (_.3) 'love) '_.4) (cons 'you '())))
    (=/= ((_.0 quote)) ((_.3 quote)))
    (absento (closure _.4)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) (cons _.2 '())) 'you)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) (lambda (_.3) _.4))
       (cons 'you '())))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) (cons _.3 '(you))) 'love))
    (=/= ((_.0 quote)) ((_.3 cons)) ((_.3 quote))) (sym _.3))
  ((((lambda (_.0) (lambda (_.1) '(I love you))) '_.2) '_.3)
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     (cons 'love
       (cons ((lambda (_.0) _.0) 'you)
         ((lambda (_.1) _.1) '()))))
    (sym _.0 _.1))
  ((cons ((lambda (_.0) ((lambda (_.1) _.0) '_.2)) 'I)
     (cons 'love '(you)))
    (=/= ((_.0 _.1)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) '_.3))
        '(I love you)))
     (cons '_.4 '_.5))
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 quote))) (sym _.1)
    (absento (closure _.3) (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I) (cons 'love _.0)))
     (cons 'you '()))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) '(I love you)) (cons '_.2 _.0)))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        ((lambda (_.2) '(love you)) _.0)))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  (((lambda (_.0) (cons 'I (_.0 'love)))
     (lambda (_.1) (cons _.1 '(you))))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0) (_.0 'love))
       (lambda (_.1) (cons _.1 '(you)))))
    (=/= ((_.0 quote)) ((_.1 cons)) ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons (_.0 '_.1) ((lambda (_.2) '(love you)) '_.3)))
     (lambda (_.4) 'I))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))
      ((_.4 quote)))
    (sym _.0) (absento (closure _.1) (closure _.3)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) '(love you)) _.0))
       (cons '_.2 '_.3)))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) (cons _.0 '(love you)))
     ((lambda (_.1) 'I) '_.2))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0) ((lambda (_.1) _.1) _.0)) '()))))
    (sym _.0 _.1))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     (cons ((lambda (_.3) 'love) '_.4) '(you)))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.1)
    (absento (closure _.2) (closure _.4)))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) _.0))
     (cons (lambda (_.2) _.3) '_.4))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.4)))
  (((lambda (_.0) ((lambda (_.1) (cons 'I _.1)) _.0))
     (cons 'love '(you)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) 'love) '_.2)
       ((lambda (_.3) _.3) '(you))))
    (=/= ((_.1 quote))) (sym _.0 _.3)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) (cons _.2 '(love you))) _.1))
        'I))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.1 _.2) (absento (closure _.3)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) (lambda (_.1) _.2))
       ((lambda (_.3) _.3) '(you))))
    (=/= ((_.0 quote))) (sym _.3))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) _.0)) '_.3))
     '(I love you))
    (=/= ((_.0 _.1)) ((_.0 quote))) (sym _.0 _.2)
    (absento (closure _.3)))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0) ((lambda (_.1) '()) _.0)) '_.2))))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       (cons ((lambda (_.2) 'you) '_.3)
         ((lambda (_.4) '()) '_.5))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 quote)))
    (absento (closure _.1) (closure _.3) (closure _.5)))
  ((cons ((lambda (_.0) ((lambda (_.1) 'I) '_.2)) '_.3)
     ((lambda (_.4) _.4) '(love you)))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.4)
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.1 ((lambda (_.2) _.0) '_.3)))
        'I))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 cons)) ((_.0 quote))
      ((_.1 cons)) ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  (((lambda (_.0)
      (cons 'I (cons _.0 ((lambda (_.1) '(you)) '_.2))))
     'love)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0) (_.0 (lambda (_.1) '(I love you))))
     (lambda (_.2) (_.2 '_.3)))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.2) (absento (closure _.3)))
  ((cons 'I
     ((lambda (_.0) (cons _.0 ((lambda (_.1) '(you)) '_.2)))
       'love))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons ((lambda (_.2) 'you) '_.3)
         ((lambda (_.4) '()) '_.5))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 quote)))
    (absento (closure _.1) (closure _.3) (closure _.5)))
  (((lambda (_.0)
      (cons 'I (cons 'love ((lambda (_.1) _.1) _.0))))
     '(you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0) ((lambda (_.1) _.1) (cons 'I _.0)))
     '(love you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0) (cons 'love ((lambda (_.1) _.1) _.0)))
       '(you)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0)
      (cons _.0 (cons 'love ((lambda (_.1) '(you)) '_.2))))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) ((lambda (_.1) _.1) _.0)) '(you))))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons (_.0 '_.1) ((lambda (_.2) _.2) '(love you))))
     (lambda (_.3) 'I))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.3 quote)))
    (sym _.0 _.2) (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) _.2) (lambda (_.4) _.5)))
       '(love you)))
    (=/= ((_.0 quote)) ((_.2 _.3))) (sym _.2)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) ((lambda (_.2) _.2) _.1)) '(love you)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0) (cons 'I ((lambda (_.1) _.1) _.0)))
     (cons 'love '(you)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0) (_.0 '(I love you)))
     (lambda (_.1) ((lambda (_.2) _.1) (lambda (_.3) _.4))))
    (=/= ((_.0 quote)) ((_.1 _.2))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons _.1 ((lambda (_.2) '(love you)) _.1)))
        'I))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.1) (absento (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) (cons _.2 '(love you))) 'I))
        _.0))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.0 _.2) (absento (closure _.3)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2)
        (cons 'love ((lambda (_.3) '(you)) '_.4)))
       '_.5))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 quote)))
    (absento (closure _.1) (closure _.4) (closure _.5)))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2)
       (cons 'I ((lambda (_.3) '(love you)) '_.4))))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.0) (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) (cons 'love _.0)) '_.2)))
     '(you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2)))
  ((((lambda (_.0) (lambda (_.1) _.1)) '_.2) '(I love you))
    (sym _.1) (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) (cons 'love _.0)) '_.2))
       '(you)))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons _.2 (cons 'you '()))) 'love))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       ((lambda (_.2) ((lambda (_.3) '(you)) '_.4)) '_.5)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (absento (closure _.1) (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) '(love you)) '_.2)))
     (lambda (_.3) _.4))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       (cons ((lambda (_.2) 'you) '_.3)
         ((lambda (_.4) _.4) '()))))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.4)
    (absento (closure _.1) (closure _.3)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) ((lambda (_.2) '(love you)) _.1))
          '_.3)))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))
      ((_.2 quote)))
    (sym _.1) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) _.2) '_.4))
           '(I love you)))
        '_.5))
     '_.6)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 _.3))
      ((_.2 quote)))
    (sym _.2)
    (absento (closure _.4) (closure _.5) (closure _.6)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) '(love you)) '_.2))
       (lambda (_.3) _.4)))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) ((lambda (_.2) '(love you)) _.1))
          '_.3))
       '_.4))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.1) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0) (_.0 'I))
     (lambda (_.1) (cons _.1 (cons 'love '(you)))))
    (=/= ((_.0 quote)) ((_.1 cons)) ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I '(love you))) (cons '_.2 '_.3)))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2)
        ((lambda (_.3) '(love you)) '_.4)))
     '_.5)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))
      ((_.3 quote)))
    (absento (closure _.2) (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) ((lambda (_.2) _.0) '_.3)) '_.4)))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0) (cons 'I (cons 'love (_.0 '(you)))))
     (lambda (_.1) _.1))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0) (_.0 '_.1)) (lambda (_.2) '())))))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) ((lambda (_.2) _.0) '_.3)) '_.4))
       '(love you)))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 quote)) ((_.1 quote)))
    (sym _.0) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) '(love you)) '_.2)))
     (cons '_.3 (lambda (_.4) _.5)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) ((lambda (_.1) (cons 'I _.0)) '_.2))
     (cons 'love '(you)))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) (cons 'love (_.0 '(you))))
       (lambda (_.1) _.1)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I (cons _.1 _.0))) 'love))
     '(you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I) ((lambda (_.2) _.2) _.0)))
     '(love you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1 _.2))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) ((lambda (_.3) '(you)) '_.4)) '_.5)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (absento (closure _.1) (closure _.4) (closure _.5)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) '(I love you)) _.1))
        '_.3))
     (cons '_.4 '_.5))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.1)
    (absento (closure _.3) (closure _.4) (closure _.5)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons ((lambda (_.2) 'you) '_.3)
         ((lambda (_.4) _.4) '()))))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.4)
    (absento (closure _.1) (closure _.3)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.1) _.0))
       (cons 'love '(you))))
    (sym _.0 _.1))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love (cons ((lambda (_.1) _.1) 'you) '())))
    (sym _.0 _.1))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) ((lambda (_.4) '(love you)) '_.5)) '_.6))
    (=/= ((_.0 quote)) ((_.3 quote)) ((_.4 quote)))
    (absento (closure _.5) (closure _.6)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) (_.0 '(you))) (lambda (_.1) _.1))))
    (=/= ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I (cons 'love '(you)))) '_.2))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) '_.3)) '_.4))
     (cons 'I '(love you)))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 quote)) ((_.1 quote)))
    (sym _.0) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) (lambda (_.3) _.4)))
        _.0))
     '(I love you))
    (=/= ((_.1 _.2))) (sym _.0 _.1))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (_.2 (lambda (_.3) _.4)))
       (lambda (_.5) '(love you))))
    (=/= ((_.0 quote)) ((_.5 quote))) (sym _.2)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) (_.1 '(love you))) (lambda (_.2) _.2)))
    (=/= ((_.1 quote))) (sym _.0 _.1 _.2))
  ((cons 'I
     ((lambda (_.0) _.0) ((lambda (_.1) '(love you)) '_.2)))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2)))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love)
       (cons ((lambda (_.1) _.1) 'you) '())))
    (sym _.0 _.1))
  (((lambda (_.0) (cons 'I (_.0 '_.1)))
     (lambda (_.2) ((lambda (_.3) '(love you)) '_.4)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.0) (absento (closure _.1) (closure _.4)))
  ((cons 'I
     ((lambda (_.0) (_.0 '_.1))
       (lambda (_.2) ((lambda (_.3) '(love you)) '_.4))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.0) (absento (closure _.1) (closure _.4)))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) '_.2))
     ((lambda (_.3) '_.4) '_.5))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.3 quote)))
    (absento (closure _.2) (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons 'I (cons _.0 ((lambda (_.1) _.1) '(you)))))
     'love)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0) (_.0 (lambda (_.1) _.1)))
     (lambda (_.2) (_.2 '(I love you))))
    (=/= ((_.2 quote))) (sym _.0 _.1 _.2))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) (cons _.0 '(you))) '_.2)))
     'love)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) (cons _.0 ((lambda (_.1) _.1) '(you))))
       'love))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) (cons _.0 '(you))) '_.2))
       'love))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love (cons 'you '())))
       (lambda (_.3) _.4)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (absento (closure _.1)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) (cons 'love (cons 'you '()))) '_.2))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0) (cons 'I (cons 'love (cons 'you '()))))
     (cons '_.1 '_.2))
    (=/= ((_.0 cons)) ((_.0 quote)))
    (absento (closure _.1) (closure _.2)))
  (((lambda (_.0) (_.0 _.0))
     (lambda (_.1) (cons 'I (cons 'love '(you)))))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0))
  (((lambda (_.0)
      (cons 'I
        (cons 'love (cons 'you ((lambda (_.1) _.1) '())))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0)
        (cons 'love (cons 'you ((lambda (_.1) _.1) '()))))
       '_.2))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  (((lambda (_.0)
      (cons _.0 (cons 'love ((lambda (_.1) _.1) '(you)))))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons (_.2 '_.3) '(you)))
       (lambda (_.4) 'love)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.4 quote)))
    (sym _.2) (absento (closure _.1) (closure _.3)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) ((lambda (_.2) _.2) _.1)) '(love you))))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1 _.2)
    (absento (closure _.3)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3)
       (cons ((lambda (_.4) _.4) 'you) '())))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.4)
    (absento (closure _.1) (closure _.3)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) (cons 'you ((lambda (_.1) _.1) '())))
         '_.2)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) ((lambda (_.2) _.2) _.1)) '(love you)))
       '_.3))
    (=/= ((_.0 quote))) (sym _.1 _.2)
    (absento (closure _.3)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       ((lambda (_.2) (cons 'you '())) (lambda (_.3) _.4))))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (absento (closure _.1)))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0) (_.0 '())) (lambda (_.1) _.1)))))
    (=/= ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) (cons 'love '(you))) _.0)))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) (cons 'love '(you))) _.0))
       '_.2))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons ((lambda (_.3) _.3) 'love) '(you)))
       '_.4))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.3)
    (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.0) '_.2) (cons 'love '(you))))
     'I)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      (cons 'I
        (cons 'love (cons 'you ((lambda (_.1) '()) '_.2)))))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love ((lambda (_.1) (cons 'you '())) '_.2)))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) _.1)) '(I love you)))
     (cons '_.3 '_.4))
    (=/= ((_.0 quote))) (sym _.1 _.2)
    (absento (closure _.3) (closure _.4)))
  ((cons 'I
     ((lambda (_.0)
        (cons 'love (cons 'you ((lambda (_.1) '()) '_.2))))
       '_.3))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) ((lambda (_.1) _.0) (cons '_.2 _.0)))
     '(I love you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2)
       (cons ((lambda (_.3) _.3) 'I) '(love you))))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.0 _.3) (absento (closure _.1)))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0) ((lambda (_.1) _.0) _.0)) '()))))
    (=/= ((_.0 _.1))) (sym _.0))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) (cons 'you ((lambda (_.1) '()) '_.2)))
         '_.3)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) (cons 'you '())) (lambda (_.3) _.4))))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love ((lambda (_.3) _.3) '(you))))
       '_.4))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))) (sym _.3)
    (absento (closure _.1) (closure _.4)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) (cons 'love '(you))) (lambda (_.4) _.5)))
    (=/= ((_.0 quote)) ((_.3 cons)) ((_.3 quote))))
  (((lambda (_.0)
      (cons (_.0 '_.1) (cons 'love (cons 'you '()))))
     (lambda (_.2) 'I))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        (cons 'love (cons 'you '()))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love)
       ((lambda (_.1) (cons 'you '())) '_.2)))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      (cons _.0 ((lambda (_.1) (cons 'love '(you))) '_.2)))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2)))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2)
       (cons 'I ((lambda (_.3) _.3) '(love you)))))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.0 _.3) (absento (closure _.1)))
  ((cons 'I
     ((lambda (_.0) (cons 'love (cons 'you '())))
       (cons '_.1 '_.2)))
    (=/= ((_.0 cons)) ((_.0 quote)))
    (absento (closure _.1) (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       ((lambda (_.2) ((lambda (_.3) _.3) '(you))) '_.4)))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.3)
    (absento (closure _.1) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) (cons _.3 _.2)) 'love))
       '(you)))
    (=/= ((_.0 quote)) ((_.2 _.3)) ((_.2 cons))
      ((_.2 quote)) ((_.3 cons)))
    (sym _.2 _.3) (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) '(love you)) '_.4))
       (cons '_.5 '_.6)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (absento (closure _.1) (closure _.4) (closure _.5)
      (closure _.6)))
  (((lambda (_.0) (cons 'I (_.0 _.0)))
     (lambda (_.1) (cons 'love '(you))))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I _.1)) (cons 'love '(you))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  (((lambda (_.0) (_.0 '(love you)))
     (lambda (_.1) ((lambda (_.2) (cons _.2 _.1)) 'I)))
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2)
        ((lambda (_.3) _.3) '(love you))))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.3)
    (absento (closure _.2) (closure _.4)))
  (((lambda (_.0) (cons 'I (cons 'love '(you))))
     (cons (lambda (_.1) _.2) '_.3))
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.3)))
  ((cons 'I
     ((lambda (_.0) (_.0 _.0))
       (lambda (_.1) (cons 'love '(you)))))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0))
  (((lambda (_.0) (cons 'I ((lambda (_.1) _.1) '(love you))))
     (cons '_.2 (lambda (_.3) _.4)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2)
        ((lambda (_.3) (cons 'love '(you))) '_.4))
       '_.5))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 cons)) ((_.3 quote)))
    (absento (closure _.1) (closure _.4) (closure _.5)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love ((lambda (_.2) '(you)) (cons '_.3 '_.4))))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) (cons 'I _.1)) '_.3))
        '(love you)))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 _.2)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.1) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2)
       ((lambda (_.3) (cons 'I '(love you))) '_.4)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 cons)) ((_.3 quote)))
    (sym _.0) (absento (closure _.1) (closure _.4)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) ((lambda (_.3) _.3) '(you))) '_.4)))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.3)
    (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) _.3) _.2))
           '(I love you)))
        '_.4))
     '_.5)
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.2 _.3)
    (absento (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        ((lambda (_.2) '(love you)) '_.3)))
     (cons '_.4 '_.5))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.1)
    (absento (closure _.3) (closure _.4) (closure _.5)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) ((lambda (_.4) _.4) '(love you))) '_.5))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.4)
    (absento (closure _.5)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3)
       ((lambda (_.4) (cons 'you '())) '_.5)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 cons))
      ((_.4 quote)))
    (absento (closure _.1) (closure _.3) (closure _.5)))
  (((lambda (_.0) (cons ((lambda (_.1) 'I) _.0) '(love you)))
     (cons '_.2 '_.3))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     (cons 'love
       (cons 'you ((lambda (_.0) '()) (cons '_.1 '_.2)))))
    (=/= ((_.0 quote)))
    (absento (closure _.1) (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) _.1) '_.4)) '_.5))
        '(I love you)))
     '_.6)
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 _.3)) ((_.1 quote))
      ((_.2 quote)))
    (sym _.1)
    (absento (closure _.4) (closure _.5) (closure _.6)))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2) (cons 'love '(you))))
     (cons '_.3 '_.4))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       (cons 'you
         ((lambda (_.2) ((lambda (_.3) _.3) '())) '_.4))))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.3)
    (absento (closure _.1) (closure _.4)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) '(you)) (cons '_.3 '_.4))))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3) (closure _.4)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) '(love you)) (cons '_.4 '_.5)))
    (=/= ((_.0 quote)) ((_.3 quote)))
    (absento (closure _.4) (closure _.5)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     (cons ((lambda (_.3) _.3) 'love) '(you)))
    (=/= ((_.0 quote))) (sym _.1 _.3)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 _.1)) (lambda (_.2) _.0)))
     '(I love you))
    (=/= ((_.0 _.2))) (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) '(love you)) '_.2))
       (cons '_.3 (lambda (_.4) _.5))))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) '(I love you)) _.2))
           '_.4))
        '_.5))
     '_.6)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.2)
    (absento (closure _.4) (closure _.5) (closure _.6)))
  (((lambda (_.0) (cons 'I (_.0 '_.1)))
     (lambda (_.2) ((lambda (_.3) _.3) '(love you))))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote)))
    (sym _.0 _.3) (absento (closure _.1)))
  (((lambda (_.0) (cons ((lambda (_.1) 'I) _.0) '(love you)))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I '(love you))) '_.2))
     (cons '_.3 (lambda (_.4) _.5)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     ((lambda (_.0) (_.0 '_.1))
       (lambda (_.2) ((lambda (_.3) _.3) '(love you)))))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.0 _.3)
    (absento (closure _.1)))
  (((lambda (_.0) ((lambda (_.1) _.1) '(I love you)))
     ((lambda (_.2) '_.3) '_.4))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.1)
    (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons 'I (cons ((lambda (_.1) _.1) 'love) '(you))))
     (cons '_.2 '_.3))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons 'you
         ((lambda (_.2) ((lambda (_.3) _.3) '())) '_.4))))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.3)
    (absento (closure _.1) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       (cons 'you
         ((lambda (_.2) ((lambda (_.3) '()) '_.4)) '_.5))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (absento (closure _.1) (closure _.4) (closure _.5)))
  ((cons 'I
     (cons ((lambda (_.0) ((lambda (_.1) _.1) 'love)) '_.2)
       (cons 'you '())))
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons 'you
         ((lambda (_.2) ((lambda (_.3) '()) '_.4)) '_.5))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (absento (closure _.1) (closure _.4) (closure _.5)))
  (((lambda (_.0) ((lambda (_.1) (cons 'I _.0)) _.0))
     (cons 'love '(you)))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons 'love ((lambda (_.3) '(you)) (lambda (_.4) _.5))))
    (=/= ((_.0 quote)) ((_.3 quote))))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) (cons 'love (cons 'you _.1))) '()))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0 _.1))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (_.2 '_.3))
       (lambda (_.4) (cons 'love '(you)))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 cons))
      ((_.4 quote)))
    (sym _.2) (absento (closure _.1) (closure _.3)))
  (((lambda (_.0)
      (cons (_.0 (lambda (_.1) _.2)) '(love you)))
     (lambda (_.3) 'I))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.3 quote))) (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) _.0)) '(I love you)))
     '_.3)
    (=/= ((_.0 _.1)) ((_.0 quote)) ((_.1 _.2)))
    (sym _.0 _.1) (absento (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons 'I ((lambda (_.2) '(love you)) '_.3)))
        '_.4))
     '_.5)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 quote)))
    (absento (closure _.3) (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons 'I
        (cons 'love
          ((lambda (_.1) '(you)) (lambda (_.2) _.3)))))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) _.2) 'love)
       ((lambda (_.3) '(you)) (lambda (_.4) _.5))))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.2)
    (absento (closure _.1)))
  ((cons 'I
     ((lambda (_.0)
        (cons 'love
          ((lambda (_.1) '(you)) (lambda (_.2) _.3))))
       '_.4))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.4)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     ((lambda (_.3) (cons 'love '(you))) '_.4))
    (=/= ((_.0 quote)) ((_.3 cons)) ((_.3 quote))) (sym _.1)
    (absento (closure _.2) (closure _.4)))
  ((cons 'I
     ((lambda (_.0) (cons ((lambda (_.1) _.1) 'love) '(you)))
       (cons '_.2 '_.3)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons 'I (cons ((lambda (_.1) _.0) '_.2) '(you))))
     'love)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) (cons ((lambda (_.1) _.0) '_.2) '(you)))
       'love))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) '(I love you))
        (cons '_.2 (lambda (_.3) _.4))))
     '_.5)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.5)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love ((lambda (_.1) (cons 'you _.1)) '())))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0 _.1))
  (((lambda (_.0) (_.0 _.0))
     (lambda (_.1) ((lambda (_.2) '(I love you)) '_.3)))
    (=/= ((_.1 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.3)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0)
          ((lambda (_.1) '(you)) (lambda (_.2) _.3)))
         '_.4)))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.4)))
  (((lambda (_.0)
      (cons 'I (cons 'love ((lambda (_.1) _.0) _.0))))
     '(you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons 'I
     ((lambda (_.0) (cons 'love ((lambda (_.1) _.0) _.0)))
       '(you)))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0))
  (((lambda (_.0) (cons 'I ((lambda (_.1) _.1) '(love you))))
     (lambda (_.2) _.3))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1)
        ((lambda (_.2) '(love you)) (lambda (_.3) _.4)))
       '_.5))
    (=/= ((_.1 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.5)))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons _.1 ((lambda (_.2) '(love you)) '_.3)))
        _.0))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  (((lambda (_.0) (cons ((lambda (_.1) _.1) 'I) '(love you)))
     (cons (lambda (_.2) _.3) '_.4))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 (lambda (_.2) _.3)))
        (lambda (_.4) '(I love you))))
     '_.5)
    (=/= ((_.0 quote)) ((_.4 quote))) (sym _.1)
    (absento (closure _.5)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) '(love you)) (lambda (_.2) _.3))))
     (cons '_.4 '_.5))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.4) (closure _.5)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) _.3) '(love you)))
       (cons '_.4 '_.5)))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.3)
    (absento (closure _.1) (closure _.4) (closure _.5)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.1) '(love you)))
       (lambda (_.2) _.3)))
    (=/= ((_.0 quote))) (sym _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) (cons _.2 _.1)) 'I)) _.0))
     '(love you))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 _.2)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)))
    (sym _.0 _.1 _.2))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) '(love you))
       (cons (lambda (_.3) _.4) '_.5)))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1) (closure _.5)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) ((lambda (_.1) _.0) _.0)) '(you))))
    (=/= ((_.0 _.1))) (sym _.0))
  (((lambda (_.0) (cons (_.0 _.0) (cons 'love '(you))))
     (lambda (_.1) 'I))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        (cons 'love (cons 'you _.0))))
     '())
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love)
       ((lambda (_.1) (cons 'you _.1)) '())))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0 _.1))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) ((lambda (_.2) _.1) _.1)) '(love you)))
    (=/= ((_.1 _.2))) (sym _.0 _.1))
  ((cons 'I
     (cons 'love
       (cons ((lambda (_.0) 'you) '_.1)
         ((lambda (_.2) ((lambda (_.3) _.3) '())) '_.4))))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.3)
    (absento (closure _.1) (closure _.4)))
  (((lambda (_.0) (cons 'I ((lambda (_.1) _.0) _.0)))
     (cons 'love '(you)))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love
       (cons 'you ((lambda (_.1) '()) (lambda (_.2) _.3)))))
    (=/= ((_.1 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons ((lambda (_.3) _.3) 'love) _.2))
       '(you)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.2 _.3) (absento (closure _.1)))
  (((lambda (_.0)
      (cons 'I
        (cons 'love (cons 'you ((lambda (_.1) _.0) '_.2)))))
     '())
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0)
        (cons 'love (cons 'you ((lambda (_.1) _.0) '_.2))))
       '()))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        ((lambda (_.2) _.2) '(love you))))
     (cons '_.3 '_.4))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1 _.2)
    (absento (closure _.3) (closure _.4)))
  (((lambda (_.0) (_.0 '(love you)))
     (lambda (_.1) (cons ((lambda (_.2) _.2) 'I) _.1)))
    (=/= ((_.0 quote)) ((_.1 cons)) ((_.1 quote)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I (cons 'love _.1))) '(you)))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) '(I love you)) (lambda (_.2) _.3)))
     (lambda (_.4) _.5))
    (=/= ((_.0 quote)) ((_.1 quote))))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons ((lambda (_.2) _.2) 'I) '(love you)))
        '_.3))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.2) (absento (closure _.3) (closure _.4)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) (cons 'you ((lambda (_.1) _.0) '_.2)))
         '())))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0) (_.0 _.0))
     (lambda (_.1) (_.1 (lambda (_.2) '(I love you)))))
    (=/= ((_.1 quote)) ((_.2 quote))) (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love)
       (cons 'you ((lambda (_.1) '()) (lambda (_.2) _.3)))))
    (=/= ((_.1 quote))) (sym _.0))
  ((cons 'I
     (cons 'love
       (cons ((lambda (_.0) 'you) '_.1)
         ((lambda (_.2) ((lambda (_.3) '()) '_.4)) '_.5))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (absento (closure _.1) (closure _.4) (closure _.5)))
  ((((lambda (_.0) (lambda (_.1) _.0)) '(I love you)) '_.2)
    (=/= ((_.0 _.1))) (sym _.0) (absento (closure _.2)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) ((lambda (_.2) '(love you)) '_.3))
          _.0)))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))
      ((_.2 quote)))
    (sym _.0) (absento (closure _.3) (closure _.4)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.1) '(love you)))
       (cons '_.2 (lambda (_.3) _.4))))
    (=/= ((_.0 quote))) (sym _.1) (absento (closure _.2)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) 'love) '_.2)
       ((lambda (_.3) '(you)) (lambda (_.4) _.5))))
    (=/= ((_.1 quote)) ((_.3 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) ((lambda (_.2) '(love you)) '_.3))
          _.0))
       '_.4))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0) (absento (closure _.3) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3)
       ((lambda (_.4) (cons 'you _.4)) '())))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 cons))
      ((_.4 quote)))
    (sym _.4) (absento (closure _.1) (closure _.3)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) (lambda (_.1) _.2))
       ((lambda (_.3) '(you)) (lambda (_.4) _.5))))
    (=/= ((_.0 quote)) ((_.3 quote))))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        ((lambda (_.2) '(love you)) (lambda (_.3) _.4))))
     '_.5)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.1)
    (absento (closure _.5)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) _.0) '_.4)) '_.5))
        '_.6))
     '(I love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 _.3)) ((_.0 quote))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0)
    (absento (closure _.4) (closure _.5) (closure _.6)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) (cons _.0 _.1)) '(you))))
     'love)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons)))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons 'I ((lambda (_.2) _.2) '(love you))))
        '_.3))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.2) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) (cons _.1 '(love you))) '_.3))
        'I))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 _.2)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.1) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0) '(I love you))
     ((lambda (_.1) (lambda (_.2) _.3)) '_.4))
    (=/= ((_.0 quote))) (absento (closure _.4)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) (cons _.0 _.1)) '(you)))
       'love))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons _.0
        ((lambda (_.1) ((lambda (_.2) '(love you)) '_.3))
          '_.4)))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))
      ((_.2 quote)))
    (sym _.0) (absento (closure _.3) (closure _.4)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) '(love you)) (lambda (_.2) _.3)))
       (cons '_.4 '_.5)))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons 'I (cons (_.0 '_.1) (cons 'you '()))))
     (lambda (_.2) 'love))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) '(I love you)) '_.3))
        _.0))
     (cons '_.4 '_.5))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0)
    (absento (closure _.3) (closure _.4) (closure _.5)))
  ((cons 'I
     ((lambda (_.0) (cons (_.0 '_.1) (cons 'you '())))
       (lambda (_.2) 'love)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love ((lambda (_.2) _.2) (cons 'you '()))))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I) ((lambda (_.2) _.0) _.0)))
     '(love you))
    (=/= ((_.0 _.2)) ((_.0 cons)) ((_.0 quote)))
    (sym _.0 _.1))
  ((cons ((lambda (_.0) ((lambda (_.1) 'I) '_.2)) '_.3)
     ((lambda (_.4) '(love you)) (lambda (_.5) _.6)))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.4 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1) '(I love you)) (lambda (_.2) _.3)))
     (cons (lambda (_.4) _.5) '_.6))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.6)))
  (((lambda (_.0)
      (cons 'I
        (cons ((lambda (_.1) _.1) 'love) (cons 'you '()))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.0) _.0))
       (cons 'love '(you))))
    (=/= ((_.0 _.1))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3)
       (cons 'you ((lambda (_.4) '()) (lambda (_.5) _.6)))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 quote)))
    (absento (closure _.1) (closure _.3)))
  ((cons 'I
     ((lambda (_.0)
        (cons ((lambda (_.1) _.1) 'love) (cons 'you '())))
       '_.2))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  (((lambda (_.0) (cons ((lambda (_.1) 'I) _.0) _.0))
     (cons 'love '(you)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons _.1 ((lambda (_.2) _.2) '(love you))))
        _.0))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) (lambda (_.3) _.4)))
        _.0))
     '(I love you))
    (=/= ((_.0 _.1)) ((_.0 _.2))) (sym _.0))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) _.1) 'love)
       ((lambda (_.2) '(you)) '_.3)))
    (=/= ((_.2 quote))) (sym _.0 _.1)
    (absento (closure _.3)))
  (((lambda (_.0) ((lambda (_.1) (cons _.1 '(love you))) 'I))
     (lambda (_.2) _.3))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) _.2) (cons 'you '()))))
    (=/= ((_.0 quote))) (sym _.2) (absento (closure _.1)))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0)
            ((lambda (_.1) '()) (lambda (_.2) _.3)))
           '_.4))))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.4)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) (cons 'love _.1)) _.0)))
     '(you))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) _.3) (cons 'love '(you))))
    (=/= ((_.0 quote))) (sym _.3))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) (cons 'love _.1)) _.0))
       '(you)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2)
        ((lambda (_.3) ((lambda (_.4) '(love you)) '_.5))
          '_.6))
       '_.7))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote))
      ((_.4 quote)))
    (absento (closure _.1) (closure _.5) (closure _.6)
      (closure _.7)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) (cons 'you '())) (cons '_.1 '_.2))))
    (=/= ((_.0 cons)) ((_.0 quote)))
    (absento (closure _.1) (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.0 (cons _.1 '(you)))) 'love))
     'I)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  ((cons ((lambda (_.0) ((lambda (_.1) 'I) '_.2)) '_.3)
     (cons 'love (cons 'you '())))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2)
       ((lambda (_.3) ((lambda (_.4) '(I love you)) '_.5))
         '_.6)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote))
      ((_.4 quote)))
    (sym _.0)
    (absento (closure _.1) (closure _.5) (closure _.6)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) (cons 'love '(you))) (cons '_.2 '_.3)))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons _.0
        (cons ((lambda (_.1) _.1) 'love) (cons 'you '()))))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2)
        (cons ((lambda (_.3) 'love) '_.4) '(you)))
       '_.5))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 quote)))
    (absento (closure _.1) (closure _.4) (closure _.5)))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I (cons _.1 '(you)))) _.0))
     'love)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons 'I (cons ((lambda (_.1) _.1) 'love) _.0)))
     (cons 'you '()))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) _.0)) 'I)
     '(love you))
    (sym _.0 _.1))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       (cons 'you
         ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) '()))))
    (=/= ((_.0 quote)) ((_.2 _.3)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1) (closure _.4)))
  ((cons 'I
     (cons 'love
       (cons ((lambda (_.0) _.0) 'you)
         ((lambda (_.1) '()) (lambda (_.2) _.3)))))
    (=/= ((_.1 quote))) (sym _.0))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2)
       (cons ((lambda (_.3) 'I) '_.4) '(love you))))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.0) (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      (cons _.0 ((lambda (_.1) (cons 'love _.1)) '(you))))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) '(I love you)) '_.3))
        '_.4))
     (cons '_.5 (lambda (_.6) _.7)))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (absento (closure _.3) (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) ((lambda (_.2) _.2) '(love you))) _.0)))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (sym _.0 _.2) (absento (closure _.3)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     (cons 'love ((lambda (_.3) '(you)) '_.4)))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.1)
    (absento (closure _.2) (closure _.4)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) ((lambda (_.2) _.2) '(love you))) _.0))
       '_.3))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0 _.2)
    (absento (closure _.3)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) ((lambda (_.2) _.1) _.1)) '(love you))))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 _.2))) (sym _.1)
    (absento (closure _.3)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) '(you)) (cons '_.1 (lambda (_.2) _.3)))))
    (=/= ((_.0 quote))) (absento (closure _.1)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) ((lambda (_.2) _.1) _.1)) '(love you)))
       '_.3))
    (=/= ((_.0 quote)) ((_.1 _.2))) (sym _.1)
    (absento (closure _.3)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons 'you
         ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) '()))))
    (=/= ((_.0 quote)) ((_.2 _.3)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) (cons _.2 _.0)) _.1)) 'I))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 cons)) ((_.0 quote))
      ((_.1 cons)) ((_.2 cons)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      (cons _.0
        ((lambda (_.1) ((lambda (_.2) _.2) '(love you)))
          '_.3)))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (sym _.0 _.2) (absento (closure _.3)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) '(love you))
       (cons '_.2 (lambda (_.3) _.4))))
    (=/= ((_.1 quote))) (sym _.0) (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) (cons 'love _.3)) '(you)))
       '_.4))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 cons)) ((_.3 quote)))
    (sym _.3) (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) '(I love you))) _.0))
     (cons '_.3 '_.4))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0 _.2)
    (absento (closure _.3) (closure _.4)))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2)
       ((lambda (_.3) (cons 'I _.3)) '(love you))))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 cons)) ((_.3 quote)))
    (sym _.0 _.3) (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) _.1)) '(I love you)))
     (cons '_.3 '_.4))
    (=/= ((_.0 quote)) ((_.1 _.2))) (sym _.1)
    (absento (closure _.3) (closure _.4)))
  (((lambda (_.0) (cons 'I (cons 'love (_.0 _.0))))
     (lambda (_.1) '(you)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0))
  ((cons 'I
     ((lambda (_.0) (cons 'love (_.0 _.0)))
       (lambda (_.1) '(you))))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0))
  (((lambda (_.0) (cons 'I '(love you)))
     ((lambda (_.1) _.1) '_.2))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  (((lambda (_.0)
      (cons (_.0 '_.1) ((lambda (_.2) '(love you)) _.0)))
     (lambda (_.3) 'I))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.0) (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1) (cons ((lambda (_.2) _.2) 'I) _.1))
        '(love you)))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1 _.2) (absento (closure _.3)))
  ((cons 'I
     ((lambda (_.0) (cons 'love '(you)))
       (cons (lambda (_.1) _.2) '_.3)))
    (=/= ((_.0 cons)) ((_.0 quote))) (absento (closure _.3)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love ((lambda (_.3) _.2) '_.4)))
       '(you)))
    (=/= ((_.0 quote)) ((_.2 _.3)) ((_.2 cons))
      ((_.2 quote)))
    (sym _.2) (absento (closure _.1) (closure _.4)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) (_.0 _.0)) (lambda (_.1) '(you)))))
    (=/= ((_.1 quote))) (sym _.0))
  ((cons 'I
     ((lambda (_.0) (cons ((lambda (_.1) _.1) 'love) _.0))
       (cons 'you '())))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I) (cons 'love '(you))))
     (cons '_.2 (lambda (_.3) _.4)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  (((lambda (_.0) (_.0 '(love you)))
     (lambda (_.1) (cons 'I ((lambda (_.2) _.1) '_.3))))
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons 'love (cons 'you ((lambda (_.3) '()) '_.4))))
    (=/= ((_.0 quote)) ((_.3 quote)))
    (absento (closure _.4)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) (cons 'love '(you)))
          (lambda (_.2) _.3))))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (absento (closure _.4)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) (_.1 _.1)) (lambda (_.2) '(love you))))
    (=/= ((_.2 quote))) (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) (cons 'love '(you)))
          (lambda (_.2) _.3)))
       '_.4))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (absento (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2)
        ((lambda (_.3) ((lambda (_.4) _.4) '(love you)))
          '_.5))
       '_.6))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.4)
    (absento (closure _.1) (closure _.5) (closure _.6)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) '(you))))
    (=/= ((_.0 quote)) ((_.2 _.3)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1) (closure _.4)))
  (((lambda (_.0) ((lambda (_.1) (cons 'I _.1)) '(love you)))
     (cons '_.2 (lambda (_.3) _.4)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2)
       ((lambda (_.3) ((lambda (_.4) _.4) '(I love you)))
         '_.5)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.0 _.4) (absento (closure _.1) (closure _.5)))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I _.0)) (cons '_.2 '_.3)))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2)
        ((lambda (_.3) _.0) '_.4)))
     '(love you))
    (=/= ((_.0 _.3)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I '(love you)))
        (lambda (_.2) _.3)))
     (cons '_.4 '_.5))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (absento (closure _.4) (closure _.5)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons (_.2 'love) '(you)))
       (lambda (_.3) _.3)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.2 _.3) (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) _.2) 'love)
       (cons 'you ((lambda (_.3) '()) '_.4))))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.2)
    (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      (cons 'I (cons ((lambda (_.1) 'love) '_.2) '(you))))
     (cons '_.3 '_.4))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) '(I love you)))
        '_.3))
     (cons '_.4 (lambda (_.5) _.6)))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.2)
    (absento (closure _.3) (closure _.4)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons ((lambda (_.3) _.3) 'love) (cons 'you '())))
    (=/= ((_.0 quote))) (sym _.3))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) (cons 'I _.0)) '_.3))
        '_.4))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 cons)) ((_.0 quote))
      ((_.1 cons)) ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.0) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.0 '(love you)))
        (cons '_.2 '_.3)))
     'I)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2) (closure _.3)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) '(you))))
    (=/= ((_.0 quote)) ((_.2 _.3)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) (cons 'I '(love you))) _.1))
        '_.3))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.1) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.1 ((lambda (_.2) _.0) _.1))) 'I))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 cons)) ((_.0 quote))
      ((_.1 cons)))
    (sym _.0 _.1))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) ((lambda (_.4) _.3) '_.5)) '(love you)))
    (=/= ((_.0 quote)) ((_.3 _.4)) ((_.3 quote))) (sym _.3)
    (absento (closure _.5)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) (cons _.1 _.2)) '(love you)))
        'I))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 _.2)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)))
    (sym _.1 _.2) (absento (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I (cons 'love '(you))))
        (lambda (_.2) _.3)))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (absento (closure _.4)))
  ((cons 'I
     (cons 'love
       (cons ((lambda (_.0) 'you) '_.1)
         ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) '()))))
    (=/= ((_.0 quote)) ((_.2 _.3)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      (cons 'I
        (cons ((lambda (_.1) _.1) 'love) (cons 'you _.0))))
     '())
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0)
        (cons ((lambda (_.1) _.1) 'love) (cons 'you _.0)))
       '()))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0) (cons 'I (_.0 '(love you))))
     (lambda (_.1) ((lambda (_.2) _.1) '_.3)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 _.2))
      ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons ((lambda (_.3) 'love) '_.4)
       ((lambda (_.5) '(you)) '_.6)))
    (=/= ((_.0 quote)) ((_.3 quote)) ((_.5 quote)))
    (absento (closure _.4) (closure _.6)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love '(you)))
       (cons '_.3 (lambda (_.4) _.5))))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (absento (closure _.1) (closure _.3)))
  ((cons 'I
     ((lambda (_.0) (_.0 '(love you)))
       (lambda (_.1) ((lambda (_.2) _.1) '_.3))))
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) (lambda (_.3) _.4))
       ((lambda (_.5) '(you)) '_.6)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.5 quote)))
    (absento (closure _.1) (closure _.6)))
  (((lambda (_.0) ((lambda (_.1) _.0) '_.2))
     ((lambda (_.3) '(I love you)) '_.4))
    (=/= ((_.0 _.1)) ((_.0 quote)) ((_.3 quote))) (sym _.0)
    (absento (closure _.2) (closure _.4)))
  (((lambda (_.0)
      (cons (_.0 'I) ((lambda (_.1) '(love you)) '_.2)))
     (lambda (_.3) _.3))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (sym _.0 _.3) (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.1 (cons 'love (cons 'you '()))))
        'I))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons _.1
           ((lambda (_.2) '(love you)) (lambda (_.3) _.4))))
        'I))
     '_.5)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.1) (absento (closure _.5)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.0) '_.2)) 'I)
     ((lambda (_.3) '(love you)) '_.4))
    (=/= ((_.0 _.1)) ((_.0 quote)) ((_.3 quote))) (sym _.0)
    (absento (closure _.2) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       (cons ((lambda (_.2) 'you) '_.3)
         ((lambda (_.4) '()) (lambda (_.5) _.6)))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 quote)))
    (absento (closure _.1) (closure _.3)))
  (((lambda (_.0) (_.0 _.0))
     (lambda (_.1) ((lambda (_.2) _.2) '(I love you))))
    (=/= ((_.1 quote))) (sym _.0 _.2))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) _.2) _.2))
           '(I love you)))
        '_.4))
     '_.5)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 _.3))) (sym _.2)
    (absento (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) (cons _.1 (cons 'you '()))) 'love)))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0)
        (cons ((lambda (_.1) 'love) '_.2) '(you)))
       (cons '_.3 '_.4)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) (cons _.1 (cons 'you '()))) 'love))
       '_.2))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) 'love) '_.2)
       (cons 'you ((lambda (_.3) '()) '_.4))))
    (=/= ((_.1 quote)) ((_.3 quote))) (sym _.0)
    (absento (closure _.2) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) (cons _.3 '(you))) _.2))
       'love))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 cons)) ((_.3 quote)))
    (sym _.2 _.3) (absento (closure _.1)))
  (((lambda (_.0)
      (cons _.0 ((lambda (_.1) (cons 'love '(you))) _.0)))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2) (cons 'love _.0)))
     (cons 'you '()))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) ((lambda (_.3) _.3) 'love)) '_.4)
       '(you)))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.3)
    (absento (closure _.1) (closure _.4)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) (lambda (_.1) _.2))
       (cons 'you ((lambda (_.3) '()) '_.4))))
    (=/= ((_.0 quote)) ((_.3 quote)))
    (absento (closure _.4)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons ((lambda (_.2) 'you) '_.3)
         ((lambda (_.4) '()) (lambda (_.5) _.6)))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 quote)))
    (absento (closure _.1) (closure _.3)))
  (((lambda (_.0) (_.0 'I))
     (lambda (_.1)
       ((lambda (_.2) (cons _.2 '(love you))) _.1)))
    (=/= ((_.0 quote)) ((_.1 cons)) ((_.1 quote))
      ((_.2 cons)) ((_.2 quote)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2) '(love you)))
     (cons (lambda (_.3) _.4) '_.5))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.5)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1)
           ((lambda (_.2) '(love you)) (lambda (_.3) _.4)))
          '_.5)))
     '_.6)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))
      ((_.2 quote)))
    (absento (closure _.5) (closure _.6)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1)
           ((lambda (_.2) '(love you)) (lambda (_.3) _.4)))
          '_.5))
       '_.6))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (absento (closure _.5) (closure _.6)))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.1 (cons 'love '(you)))) 'I))
     (cons '_.2 '_.3))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) _.0)) '_.3))
     '(I love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 quote))) (sym _.0)
    (absento (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) (cons 'I '(love you))) '_.3))
        _.0))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.0) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0) (cons ((lambda (_.1) 'I) _.0) _.0))
     '(love you))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons 'love (cons ((lambda (_.3) 'you) '_.4) '())))
    (=/= ((_.0 quote)) ((_.3 quote)))
    (absento (closure _.4)))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0)
            ((lambda (_.1) ((lambda (_.2) _.2) '())) '_.3))
           '_.4))))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.2)
    (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) '(I love you)) (lambda (_.3) _.4)))
        '_.5))
     (cons '_.6 '_.7))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (absento (closure _.5) (closure _.6) (closure _.7)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) '(I love you)) '_.3))
        (cons '_.4 '_.5)))
     '_.6)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))
      ((_.2 quote)))
    (absento (closure _.3) (closure _.4) (closure _.5)
      (closure _.6)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) _.2) '_.4))
       (cons 'love '(you))))
    (=/= ((_.0 quote)) ((_.2 _.3)) ((_.2 quote))) (sym _.2)
    (absento (closure _.1) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) _.2) 'love)
       (cons ((lambda (_.3) 'you) '_.4) '())))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.2)
    (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) (cons _.2 _.0)) 'I)) _.0))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 cons)) ((_.0 quote))
      ((_.1 cons)) ((_.1 quote)) ((_.2 cons)))
    (sym _.0 _.2))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (_.2 '(you)))
       (lambda (_.3) (cons 'love _.3))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 cons))
      ((_.3 quote)))
    (sym _.2 _.3) (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) _.3) '(I love you)))
           _.1))
        '_.4))
     '_.5)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.1 _.3) (absento (closure _.4) (closure _.5)))
  (((lambda (_.0) ((lambda (_.1) (cons 'I '(love you))) _.0))
     (cons '_.2 (lambda (_.3) _.4)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2)))
  (((lambda (_.0)
      (cons 'I
        (cons 'love ((lambda (_.1) (cons _.1 '())) 'you))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons 'love (cons 'you ((lambda (_.3) _.3) '()))))
    (=/= ((_.0 quote))) (sym _.3))
  (((lambda (_.0)
      ((lambda (_.1) _.0) (cons '_.2 (lambda (_.3) _.4))))
     '(I love you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0)
        (cons 'love ((lambda (_.1) (cons _.1 '())) 'you)))
       '_.2))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0) (_.0 _.0)) (lambda (_.1) '())))))
    (=/= ((_.1 quote))) (sym _.0))
  (((lambda (_.0) (_.0 _.0))
     (lambda (_.1)
       (cons ((lambda (_.2) _.2) 'I) '(love you))))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0 _.2))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        ((lambda (_.2) _.0) '_.3)))
     (cons 'love '(you)))
    (=/= ((_.0 _.2)) ((_.0 cons)) ((_.0 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) ((lambda (_.1) (cons _.1 '())) 'you))
         '_.2)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) ((lambda (_.2) (cons _.2 '(you))) 'love))
       '_.3))
    (=/= ((_.1 cons)) ((_.1 quote)) ((_.2 cons))
      ((_.2 quote)))
    (sym _.0 _.2) (absento (closure _.3)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) (cons _.1 '(you))) 'love)))
     (cons '_.2 '_.3))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2) (closure _.3)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     ((lambda (_.3) (cons 'love _.3)) '(you)))
    (=/= ((_.0 quote)) ((_.3 cons)) ((_.3 quote)))
    (sym _.1 _.3) (absento (closure _.2)))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0)
            ((lambda (_.1) _.0) (lambda (_.2) _.3)))
           '()))))
    (=/= ((_.0 _.1))) (sym _.0))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) '(I love you)) '_.4))
           _.1))
        '_.5))
     '_.6)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.1)
    (absento (closure _.4) (closure _.5) (closure _.6)))
  (((lambda (_.0)
      (cons 'I (cons _.0 ((lambda (_.1) '(you)) _.0))))
     'love)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) _.2) 'love)
       (cons 'you ((lambda (_.3) _.3) '()))))
    (=/= ((_.0 quote))) (sym _.2 _.3)
    (absento (closure _.1)))
  (((lambda (_.0) (_.0 (lambda (_.1) '(I love you))))
     (lambda (_.2) (_.2 _.2)))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0 _.2))
  ((cons 'I
     ((lambda (_.0) (cons _.0 ((lambda (_.1) '(you)) _.0)))
       'love))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       (cons ((lambda (_.2) _.2) 'you)
         ((lambda (_.3) '()) '_.4))))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.2)
    (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) (cons 'I _.2)) _.1))
        '(love you)))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.1 _.2) (absento (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I ((lambda (_.2) _.1) '_.3)))
        '(love you)))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 _.2)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons (_.0 'I) ((lambda (_.1) _.1) '(love you))))
     (lambda (_.2) _.2))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1 _.2))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       (cons ((lambda (_.2) 'you) (lambda (_.3) _.4)) '())))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) '(I love you)))
        (cons '_.3 '_.4)))
     '_.5)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.2)
    (absento (closure _.3) (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons _.0 (cons 'love ((lambda (_.1) '(you)) _.0))))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) 'love) '_.2)
       (cons ((lambda (_.3) 'you) '_.4) '())))
    (=/= ((_.1 quote)) ((_.3 quote))) (sym _.0)
    (absento (closure _.2) (closure _.4)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons ((lambda (_.2) _.2) 'you)
         ((lambda (_.3) '()) '_.4))))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.2)
    (absento (closure _.1) (closure _.4)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) (lambda (_.1) _.2))
       (cons ((lambda (_.3) 'you) '_.4) '())))
    (=/= ((_.0 quote)) ((_.3 quote)))
    (absento (closure _.4)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons ((lambda (_.2) 'you) (lambda (_.3) _.4)) '())))
    (=/= ((_.0 quote)) ((_.2 quote)))
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons ((lambda (_.3) 'love) (lambda (_.4) _.5)) '(you)))
    (=/= ((_.0 quote)) ((_.3 quote))))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 'I))
        (lambda (_.2) (cons _.2 '(love you)))))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))
      ((_.2 cons)) ((_.2 quote)))
    (sym _.1 _.2) (absento (closure _.3)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        ((lambda (_.2) (cons _.2 '(you))) 'love)))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 cons))
      ((_.2 quote)))
    (sym _.1 _.2) (absento (closure _.3)))
  ((cons ((lambda (_.0) ((lambda (_.1) 'I) '_.2)) '_.3)
     (cons ((lambda (_.4) 'love) '_.5) '(you)))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.4 quote)))
    (absento (closure _.2) (closure _.3) (closure _.5)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) (cons 'love (cons _.1 '()))) 'you))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) _.3) '(I love you)))
           '_.4))
        _.0))
     '_.5)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.3) (absento (closure _.4) (closure _.5)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) (cons _.1 '(you))) 'love))
       (cons '_.2 '_.3)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.2) (closure _.3)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love ((lambda (_.3) '(you)) _.2)))
       '_.4))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.2) (absento (closure _.1) (closure _.4)))
  (((lambda (_.0) ((lambda (_.1) (cons _.1 '(love you))) 'I))
     (cons (lambda (_.2) _.3) '_.4))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.4)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) 'love) '_.2)
       (cons 'you ((lambda (_.3) _.3) '()))))
    (=/= ((_.1 quote))) (sym _.0 _.3)
    (absento (closure _.2)))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2)
       (cons 'I ((lambda (_.3) '(love you)) _.2))))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.0 _.2) (absento (closure _.1)))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0)
            ((lambda (_.1) ((lambda (_.2) '()) '_.3)) '_.4))
           '_.5))))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (absento (closure _.3) (closure _.4) (closure _.5)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) (lambda (_.1) _.2))
       (cons 'you ((lambda (_.3) _.3) '()))))
    (=/= ((_.0 quote))) (sym _.3))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       ((lambda (_.2) ((lambda (_.3) '(you)) _.2)) '_.4)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.2) (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) '(I love you)) '_.4))
           '_.5))
        _.0))
     '_.6)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.0)
    (absento (closure _.4) (closure _.5) (closure _.6)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) '(I love you)) _.0)) _.0))
     '_.3)
    (=/= ((_.0 _.1)) ((_.0 quote)) ((_.1 quote))
      ((_.2 quote)))
    (sym _.0) (absento (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) (cons 'I _.2)) '(love you)))
        _.0))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.0 _.2) (absento (closure _.3)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love ((lambda (_.1) (cons _.1 '())) 'you)))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0 _.1))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) ((lambda (_.2) _.1) '_.3)) _.0)))
     '(love you))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 _.2))
      ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons ((lambda (_.0) ((lambda (_.1) 'I) _.0)) '_.2)
     '(love you))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2)
        ((lambda (_.3) '(love you)) _.0)))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))
      ((_.3 quote)))
    (sym _.0) (absento (closure _.2) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love (_.2 '_.3)))
       (lambda (_.4) '(you))))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.4 quote)))
    (sym _.2) (absento (closure _.1) (closure _.3)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) ((lambda (_.2) _.1) '_.3)) _.0))
       '(love you)))
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  (((lambda (_.0) (cons 'I ((lambda (_.1) '(love you)) _.0)))
     (cons '_.2 (lambda (_.3) _.4)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     (cons ((lambda (_.0) ((lambda (_.1) _.0) '_.2)) 'love)
       '(you)))
    (=/= ((_.0 _.1)) ((_.0 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) ((lambda (_.2) _.0) _.1)) '_.3)))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 cons)) ((_.0 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) ((lambda (_.2) _.0) _.1)) '_.3))
       '(love you)))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) _.1) 'love)
       ((lambda (_.2) _.2) '(you))))
    (sym _.0 _.1 _.2))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) ((lambda (_.3) '(you)) _.2)) '_.4)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.2) (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        ((lambda (_.1) ((lambda (_.2) _.1) '_.3))
          '(love you))))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 _.2))
      ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) ((lambda (_.4) '(love you)) _.3)) '_.5))
    (=/= ((_.0 quote)) ((_.3 quote)) ((_.4 quote)))
    (sym _.3) (absento (closure _.5)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) '_.3)) _.0))
     (cons 'I '(love you)))
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        (cons 'love (cons _.0 '()))))
     'you)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love)
       ((lambda (_.1) (cons _.1 '())) 'you)))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.0 _.1)) (cons 'love '(you))))
     'I)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons)))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) _.1)) '_.3))
     (cons 'I '(love you)))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       ((lambda (_.2) (_.2 '_.3)) (lambda (_.4) '(you)))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 quote)))
    (sym _.2) (absento (closure _.1) (closure _.3)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) (cons 'love _.1)) (cons 'you '())))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) (cons ((lambda (_.2) _.2) 'I) _.0))
        '_.3))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.2) (absento (closure _.3)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons ((lambda (_.3) 'love) '_.4) _.2))
       '(you)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.2) (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      (cons 'I
        (cons 'love (cons 'you ((lambda (_.1) _.1) _.0)))))
     '())
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0)
        (cons 'love (cons 'you ((lambda (_.1) _.1) _.0))))
       '()))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0) (cons 'I (_.0 '_.1)))
     (lambda (_.2) ((lambda (_.3) '(love you)) _.2)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.0 _.2) (absento (closure _.1)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons ((lambda (_.1) 'love) (lambda (_.2) _.3))
       (cons 'you '())))
    (=/= ((_.1 quote))) (sym _.0))
  (((lambda (_.0) (_.0 '(love you)))
     (lambda (_.1) (cons ((lambda (_.2) 'I) '_.3) _.1)))
    (=/= ((_.0 quote)) ((_.1 cons)) ((_.1 quote))
      ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons 'I
     ((lambda (_.0) (_.0 '_.1))
       (lambda (_.2) ((lambda (_.3) '(love you)) _.2))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.0 _.2) (absento (closure _.1)))
  (((lambda (_.0) ((lambda (_.1) '(I love you)) _.0))
     ((lambda (_.2) '_.3) '_.4))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0) (absento (closure _.3) (closure _.4)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) (cons 'you ((lambda (_.1) _.1) _.0)))
         '())))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) (_.2 '_.3)) (lambda (_.4) '(you)))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 quote)))
    (sym _.2) (absento (closure _.1) (closure _.3)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2)
        ((lambda (_.3) ((lambda (_.4) _.3) '_.5))
          '(love you)))
       '_.6))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 _.4))
      ((_.3 quote)))
    (sym _.3)
    (absento (closure _.1) (closure _.5) (closure _.6)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) '(love you)) ((lambda (_.3) '_.4) '_.5)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (absento (closure _.1) (closure _.4) (closure _.5)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) (_.3 '_.4)) (lambda (_.5) '(love you))))
    (=/= ((_.0 quote)) ((_.3 quote)) ((_.5 quote)))
    (sym _.3) (absento (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) ((lambda (_.3) 'love) '_.4)) '_.5)
       '(you)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (absento (closure _.1) (closure _.4) (closure _.5)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     (cons 'love ((lambda (_.3) _.3) '(you))))
    (=/= ((_.0 quote))) (sym _.1 _.3)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3)
       ((lambda (_.4) (cons _.4 '())) 'you)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 cons))
      ((_.4 quote)))
    (sym _.4) (absento (closure _.1) (closure _.3)))
  (((lambda (_.0) (_.0 '_.1))
     (lambda (_.2)
       ((lambda (_.3) ((lambda (_.4) _.3) '_.5))
         '(I love you))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 _.4))
      ((_.3 quote)))
    (sym _.0 _.3) (absento (closure _.1) (closure _.5)))
  (((lambda (_.0)
      ((lambda (_.1) (cons _.1 (cons 'love (cons 'you _.0))))
        'I))
     '())
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) '_.3))
        '(I love you)))
     (cons '_.4 (lambda (_.5) _.6)))
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 quote))) (sym _.1)
    (absento (closure _.3) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       (cons ((lambda (_.2) _.2) 'you)
         ((lambda (_.3) _.3) '()))))
    (=/= ((_.0 quote))) (sym _.2 _.3)
    (absento (closure _.1)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) (cons _.1 (cons 'you _.0))) 'love)))
     '())
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0) (cons 'I _.0))
     ((lambda (_.1) _.1) '(love you)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) (cons _.1 (cons 'you _.0))) 'love))
       '()))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons 'I
        (cons 'love (cons 'you ((lambda (_.1) '()) _.0)))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0)
        (cons 'love (cons 'you ((lambda (_.1) '()) _.0))))
       '_.2))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     (cons ((lambda (_.0) ((lambda (_.1) 'love) '_.2)) '_.3)
       (cons 'you '())))
    (=/= ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons ((lambda (_.2) _.2) 'you)
         ((lambda (_.3) _.3) '()))))
    (=/= ((_.0 quote))) (sym _.2 _.3)
    (absento (closure _.1)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) (cons 'you ((lambda (_.1) '()) _.0)))
         '_.2)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0)
            ((lambda (_.1) ((lambda (_.2) _.1) '_.3)) '()))
           '_.4))))
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 quote))) (sym _.1)
    (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2)
            ((lambda (_.3) '(I love you)) (lambda (_.4) _.5)))
           '_.6))
        '_.7))
     '_.8)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote))
      ((_.3 quote)))
    (absento (closure _.6) (closure _.7) (closure _.8)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (_.2 'love))
       (lambda (_.3) (cons _.3 '(you)))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 cons))
      ((_.3 quote)))
    (sym _.2 _.3) (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) '(love you)) _.2))
       (cons '_.4 '_.5)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.2)
    (absento (closure _.1) (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons 'I (cons ((lambda (_.1) 'love) '_.2) _.0)))
     (cons 'you '()))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) (cons _.2 '(love you))) _.1))
        _.0))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) _.1) _.2)) '_.4))
        '(I love you)))
     '_.5)
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 _.3)) ((_.1 quote)))
    (sym _.1 _.2) (absento (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) '(love you)) (cons '_.2 '_.3))))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       (cons 'you
         ((lambda (_.2) ((lambda (_.3) _.3) _.2)) '()))))
    (=/= ((_.0 quote))) (sym _.2 _.3)
    (absento (closure _.1)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) '(love you)) (cons '_.2 '_.3)))
       '_.4))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     (cons ((lambda (_.3) 'love) '_.4) (cons 'you '())))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.1)
    (absento (closure _.2) (closure _.4)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        ((lambda (_.2) '(love you)) _.0)))
     (cons '_.3 '_.4))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) (cons 'I '(love you)))
           (lambda (_.3) _.4)))
        '_.5))
     '_.6)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (absento (closure _.5) (closure _.6)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.1) 'I)) '_.2)
     ((lambda (_.3) (cons _.3 '(you))) 'love))
    (=/= ((_.0 quote)) ((_.3 cons)) ((_.3 quote)))
    (sym _.1 _.3) (absento (closure _.2)))
  (((lambda (_.0)
      (cons 'I
        (cons 'love ((lambda (_.1) (cons _.1 _.0)) 'you))))
     '())
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons)))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.2) _.0)) _.0))
     '(I love you))
    (=/= ((_.0 _.1))) (sym _.0 _.2))
  (((lambda (_.0)
      ((lambda (_.1) '(I love you)) (cons '_.2 '_.3)))
     (cons '_.4 '_.5))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)
      (closure _.5)))
  ((cons 'I
     ((lambda (_.0)
        (cons 'love ((lambda (_.1) (cons _.1 _.0)) 'you)))
       '()))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons)))
    (sym _.0 _.1))
  ((cons 'I
     (cons ((lambda (_.0) ((lambda (_.1) _.1) 'love)) '_.2)
       ((lambda (_.3) '(you)) '_.4)))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.1)
    (absento (closure _.2) (closure _.4)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons 'you
         ((lambda (_.2) ((lambda (_.3) _.3) _.2)) '()))))
    (=/= ((_.0 quote))) (sym _.2 _.3)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     (cons ((lambda (_.3) 'love) '_.4)
       ((lambda (_.5) _.5) '(you))))
    (=/= ((_.0 quote)) ((_.3 quote))) (sym _.5)
    (absento (closure _.4)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) ((lambda (_.1) (cons _.1 _.0)) 'you))
         '())))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons)))
    (sym _.0 _.1))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) (lambda (_.3) _.4))
       ((lambda (_.5) _.5) '(you))))
    (=/= ((_.0 quote)) ((_.2 quote))) (sym _.5)
    (absento (closure _.1)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) '(love you)) _.0))
       (cons '_.2 (lambda (_.3) _.4))))
    (=/= ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love
       (cons ((lambda (_.1) 'you) '_.2)
         ((lambda (_.3) '()) '_.4))))
    (=/= ((_.1 quote)) ((_.3 quote))) (sym _.0)
    (absento (closure _.2) (closure _.4)))
  (((lambda (_.0) (_.0 _.0))
     (lambda (_.1)
       (cons ((lambda (_.2) 'I) '_.3) '(love you))))
    (=/= ((_.1 cons)) ((_.1 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.3)))
  ((cons ((lambda (_.0) ((lambda (_.1) _.0) '_.2)) 'I)
     ((lambda (_.3) _.3) '(love you)))
    (=/= ((_.0 _.1)) ((_.0 quote))) (sym _.0 _.3)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons ((lambda (_.2) 'I) '_.3) '(love you)))
        '_.4))
     '_.5)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 quote)))
    (absento (closure _.3) (closure _.4) (closure _.5)))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       (cons 'you
         ((lambda (_.2) ((lambda (_.3) '()) _.2)) '_.4))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.2) (absento (closure _.1) (closure _.4)))
  ((cons 'I
     ((lambda (_.0) (cons ((lambda (_.1) 'love) '_.2) _.0))
       (cons 'you '())))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0)
    (absento (closure _.2)))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love)
       (cons ((lambda (_.1) 'you) '_.2)
         ((lambda (_.3) '()) '_.4))))
    (=/= ((_.1 quote)) ((_.3 quote))) (sym _.0)
    (absento (closure _.2) (closure _.4)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons _.2 ((lambda (_.3) '(you)) '_.4)))
       'love))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote))
      ((_.3 quote)))
    (sym _.2) (absento (closure _.1) (closure _.4)))
  (((lambda (_.0) (_.0 'I))
     (lambda (_.1)
       (cons _.1 ((lambda (_.2) '(love you)) '_.3))))
    (=/= ((_.0 quote)) ((_.1 cons)) ((_.1 quote))
      ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       (cons 'you
         ((lambda (_.2) ((lambda (_.3) '()) _.2)) '_.4))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.2) (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I (cons 'love _.0))) '_.2))
     '(you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2)))
  ((cons 'I
     (cons 'love
       (cons ((lambda (_.0) 'you) (lambda (_.1) _.2))
         ((lambda (_.3) '()) '_.4))))
    (=/= ((_.0 quote)) ((_.3 quote)))
    (absento (closure _.4)))
  (((lambda (_.0)
      (cons 'I
        (cons 'love ((lambda (_.1) _.0) (lambda (_.2) _.3)))))
     '(you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons 'I
     ((lambda (_.0)
        (cons 'love ((lambda (_.1) _.0) (lambda (_.2) _.3))))
       '(you)))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons ((lambda (_.2) 'love) '_.3)
       (cons ((lambda (_.4) 'you) '_.5)
         ((lambda (_.6) '()) '_.7))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.4 quote))
      ((_.6 quote)))
    (absento (closure _.1) (closure _.3) (closure _.5)
      (closure _.7)))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons 'I ((lambda (_.2) '(love you)) _.1)))
        '_.3))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.1) (absento (closure _.3) (closure _.4)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0)
          ((lambda (_.1) _.0) (lambda (_.2) _.3)))
         '(you))))
    (=/= ((_.0 _.1))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) (cons 'love ((lambda (_.3) _.3) _.2)))
       '(you)))
    (=/= ((_.0 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.2 _.3) (absento (closure _.1)))
  (((lambda (_.0)
      (cons 'I
        (cons ((lambda (_.1) _.1) 'love) (cons _.0 '()))))
     'you)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons 'I
     ((lambda (_.0)
        (cons ((lambda (_.1) _.1) 'love) (cons _.0 '())))
       'you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) ((lambda (_.2) _.1) (lambda (_.3) _.4)))
       '(love you)))
    (=/= ((_.1 _.2))) (sym _.0 _.1))
  ((cons 'I
     (cons 'love
       (cons ((lambda (_.0) 'you) '_.1)
         ((lambda (_.2) ((lambda (_.3) _.3) _.2)) '()))))
    (=/= ((_.0 quote))) (sym _.2 _.3)
    (absento (closure _.1)))
  (((lambda (_.0)
      (cons 'I (cons 'love (cons 'you (_.0 '_.1)))))
     (lambda (_.2) '()))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1) (_.1 (lambda (_.2) _.3)))
        (lambda (_.4) _.0)))
     '(I love you))
    (=/= ((_.0 _.4))) (sym _.0 _.1))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) _.0) (lambda (_.2) _.3))))
     (cons 'love '(you)))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))) (sym _.0))
  (((lambda (_.0) (_.0 '(love you)))
     (lambda (_.1) (cons 'I ((lambda (_.2) _.2) _.1))))
    (=/= ((_.0 quote)) ((_.1 cons)) ((_.1 quote)))
    (sym _.0 _.1 _.2))
  (((lambda (_.0) (cons 'I (cons (_.0 _.0) '(you))))
     (lambda (_.1) 'love))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0))
  ((cons 'I
     ((lambda (_.0) (cons 'love (cons 'you (_.0 '_.1))))
       (lambda (_.2) '())))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I ((lambda (_.2) _.0) '_.3)))
        '_.4))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 cons)) ((_.0 quote))
      ((_.1 cons)) ((_.1 quote)))
    (sym _.0) (absento (closure _.3) (closure _.4)))
  ((cons 'I
     ((lambda (_.0) (cons (_.0 _.0) '(you)))
       (lambda (_.1) 'love)))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))) (sym _.0))
  ((cons ((lambda (_.0) 'I) '_.1)
     (cons 'love
       ((lambda (_.2) ((lambda (_.3) _.3) _.2)) '(you))))
    (=/= ((_.0 quote))) (sym _.2 _.3)
    (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.1) '_.3))
        (cons 'I '(love you))))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 _.2))
      ((_.1 quote)))
    (sym _.1) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons (_.0 '_.1)
        ((lambda (_.2) '(love you)) (lambda (_.3) _.4))))
     (lambda (_.5) 'I))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))
      ((_.5 quote)))
    (sym _.0) (absento (closure _.1)))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons _.1 ((lambda (_.2) '(love you)) _.1)))
        _.0))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) _.2) '_.4)) _.1))
        '(I love you)))
     '_.5)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 _.3))
      ((_.2 quote)))
    (sym _.1 _.2) (absento (closure _.4) (closure _.5)))
  (((lambda (_.0)
      (cons (_.0 '_.1)
        (cons ((lambda (_.2) _.2) 'love) '(you))))
     (lambda (_.3) 'I))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.3 quote)))
    (sym _.0 _.2) (absento (closure _.1)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) (cons 'you (_.0 '_.1)))
         (lambda (_.2) '()))))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.1)))
  (((lambda (_.0)
      (cons ((lambda (_.1) 'I) '_.2)
        ((lambda (_.3) _.3) _.0)))
     '(love you))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (sym _.0 _.3) (absento (closure _.2)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) _.1) (cons 'love '(you)))))
     '_.2)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.1) (cons 'love '(you))))
       '_.2))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) (cons _.2 (cons 'love '(you)))) 'I))
        '_.3))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.2) (absento (closure _.3) (closure _.4)))
  ((cons 'I
     (cons 'love
       (cons 'you
         ((lambda (_.0)
            ((lambda (_.1) ((lambda (_.2) _.0) '_.3)) '_.4))
           '()))))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 quote)) ((_.1 quote)))
    (sym _.0) (absento (closure _.3) (closure _.4)))
  ((cons 'I
     (cons ((lambda (_.0) 'love) '_.1)
       ((lambda (_.2) ((lambda (_.3) _.3) _.2)) '(you))))
    (=/= ((_.0 quote))) (sym _.2 _.3)
    (absento (closure _.1)))
  ((cons ((lambda (_.0) 'I) (lambda (_.1) _.2))
     ((lambda (_.3) ((lambda (_.4) _.4) _.3)) '(love you)))
    (=/= ((_.0 quote))) (sym _.3 _.4))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) (cons 'love _.0)) _.0)))
     '(you))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) (cons 'love _.0)) _.0))
       '(you)))
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0))
  (((lambda (_.0) ((lambda (_.1) _.1) (cons 'I '(love you))))
     (cons '_.2 '_.3))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.1)
    (absento (closure _.2) (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1)
         (cons _.1 ((lambda (_.2) (cons _.2 '(you))) 'love)))
        'I))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.1 _.2) (absento (closure _.3)))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1)
        (cons 'love ((lambda (_.2) '(you)) '_.3)))
       '_.4))
    (=/= ((_.1 cons)) ((_.1 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons 'I (cons 'love ((lambda (_.1) '(you)) '_.2))))
     (cons '_.3 '_.4))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.3) (closure _.4)))
  ((cons 'I
     (cons 'love
       (cons ((lambda (_.0) 'you) '_.1)
         ((lambda (_.2) ((lambda (_.3) '()) _.2)) '_.4))))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (sym _.2) (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        ((lambda (_.2) _.0) (lambda (_.3) _.4))))
     '(love you))
    (=/= ((_.0 _.2)) ((_.0 cons)) ((_.0 quote)))
    (sym _.0 _.1))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.0) '_.2)
        ((lambda (_.3) '(love you)) '_.4)))
     'I)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote))
      ((_.3 quote)))
    (sym _.0) (absento (closure _.2) (closure _.4)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) ((lambda (_.2) '(love you)) _.1)) _.0)))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))
      ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) ((lambda (_.2) '(love you)) _.1)) _.0))
       '_.3))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons 'I
     ((lambda (_.0) ((lambda (_.1) _.0) (lambda (_.2) _.3)))
       (cons 'love '(you))))
    (=/= ((_.0 _.1))) (sym _.0))
  (((lambda (_.0) (cons 'I (_.0 '(love you))))
     (lambda (_.1) ((lambda (_.2) _.2) _.1)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1 _.2))
  ((cons 'I
     ((lambda (_.0) (_.0 '(love you)))
       (lambda (_.1) ((lambda (_.2) _.2) _.1))))
    (=/= ((_.0 quote))) (sym _.0 _.1 _.2))
  (((lambda (_.0) ((lambda (_.1) _.1) _.0))
     ((lambda (_.2) '(I love you)) '_.3))
    (=/= ((_.2 quote))) (sym _.0 _.1)
    (absento (closure _.3)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1) ((lambda (_.2) _.0) '_.3)) _.0)))
     '(love you))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 cons)) ((_.0 quote))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.3)))
  (((lambda (_.0)
      (cons (_.0 '_.1)
        ((lambda (_.2) (cons _.2 '(you))) 'love)))
     (lambda (_.3) 'I))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 cons))
      ((_.2 quote)) ((_.3 quote)))
    (sym _.0 _.2) (absento (closure _.1)))
  (((lambda (_.0)
      (cons 'I
        ((lambda (_.1)
           ((lambda (_.2) (cons _.2 '(you))) 'love))
          '_.3)))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.2) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      (cons _.0
        ((lambda (_.1) ((lambda (_.2) '(love you)) _.1))
          '_.3)))
     'I)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote))
      ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1) ((lambda (_.2) _.0) '_.3)) _.0))
       '(love you)))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 quote)) ((_.1 quote)))
    (sym _.0) (absento (closure _.3)))
  ((cons 'I
     ((lambda (_.0)
        ((lambda (_.1)
           ((lambda (_.2) (cons _.2 '(you))) 'love))
          '_.3))
       '_.4))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.2) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) '(I love you)) _.1)) _.0))
     (cons '_.3 '_.4))
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.3) (closure _.4)))
  (((lambda (_.0) (cons _.0 '(love you)))
     ((lambda (_.1) _.1) 'I))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  ((cons ((lambda (_.0) _.0) 'I)
     ((lambda (_.1) (cons _.1 (cons 'you '()))) 'love))
    (=/= ((_.1 cons)) ((_.1 quote))) (sym _.0 _.1))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love
       ((lambda (_.1) ((lambda (_.2) '(you)) '_.3)) '_.4)))
    (=/= ((_.1 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.3) (closure _.4)))
  ((cons ((lambda (_.0) _.0) 'I)
     (cons 'love
       (cons ((lambda (_.1) 'you) '_.2)
         ((lambda (_.3) _.3) '()))))
    (=/= ((_.1 quote))) (sym _.0 _.3)
    (absento (closure _.2)))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I '(love you))) (cons '_.2 _.0)))
     '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2) (closure _.3)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) (cons 'love _.2)) '_.4))
       '(you)))
    (=/= ((_.0 quote)) ((_.2 _.3)) ((_.2 cons))
      ((_.2 quote)) ((_.3 cons)) ((_.3 quote)))
    (sym _.2) (absento (closure _.1) (closure _.4)))
  (((lambda (_.0)
      (cons 'I
        (cons 'love (cons _.0 ((lambda (_.1) _.1) '())))))
     'you)
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) ((lambda (_.3) _.2) '_.4))
           '(I love you)))
        _.0))
     '_.5)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 _.3))
      ((_.2 quote)))
    (sym _.0 _.2) (absento (closure _.4) (closure _.5)))
  (((lambda (_.0)
      ((lambda (_.1) ((lambda (_.2) _.0) '_.3)) _.0))
     (cons 'I '(love you)))
    (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 quote)) ((_.1 quote)))
    (sym _.0) (absento (closure _.3)))
  (((lambda (_.0)
      ((lambda (_.1)
         ((lambda (_.2) (cons _.2 '(love you))) 'I))
        '_.3))
     (cons '_.4 '_.5))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.2)
    (absento (closure _.3) (closure _.4) (closure _.5)))
  ((cons 'I
     ((lambda (_.0)
        (cons 'love (cons _.0 ((lambda (_.1) _.1) '()))))
       'you))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0) (_.0 '(love you)))
     (lambda (_.1) ((lambda (_.2) (cons 'I _.1)) '_.3)))
    (=/= ((_.0 quote)) ((_.1 _.2)) ((_.1 cons))
      ((_.1 quote)) ((_.2 cons)) ((_.2 quote)))
    (sym _.0 _.1) (absento (closure _.3)))
  (((lambda (_.0)
      (cons 'I ((lambda (_.1) '(love you)) '_.2)))
     (cons (lambda (_.3) _.4) '_.5))
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 quote)))
    (absento (closure _.2) (closure _.5)))
  ((cons 'I
     (cons 'love
       ((lambda (_.0) (cons _.0 ((lambda (_.1) _.1) '())))
         'you)))
    (=/= ((_.0 cons)) ((_.0 quote))) (sym _.0 _.1))
  (((lambda (_.0)
      ((lambda (_.1) (cons 'I (cons _.0 '(you)))) '_.2))
     'love)
    (=/= ((_.0 _.1)) ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (sym _.0) (absento (closure _.2)))
  (((lambda (_.0)
      (cons ((lambda (_.1) _.1) 'I)
        (cons 'love ((lambda (_.2) '(you)) '_.3))))
     '_.4)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.2 quote))) (sym _.1)
    (absento (closure _.3) (closure _.4)))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love)
       ((lambda (_.1) ((lambda (_.2) '(you)) '_.3)) '_.4)))
    (=/= ((_.1 quote)) ((_.2 quote))) (sym _.0)
    (absento (closure _.3) (closure _.4)))
  ((cons 'I
     (cons ((lambda (_.0) _.0) 'love)
       (cons ((lambda (_.1) 'you) '_.2)
         ((lambda (_.3) _.3) '()))))
    (=/= ((_.1 quote))) (sym _.0 _.3)
    (absento (closure _.2)))
  ((cons ((lambda (_.0) 'I) '_.1)
     ((lambda (_.2) ((lambda (_.3) '(love you)) '_.4))
       (lambda (_.5) _.6)))
    (=/= ((_.0 quote)) ((_.2 quote)) ((_.3 quote)))
    (absento (closure _.1) (closure _.4))))
> 